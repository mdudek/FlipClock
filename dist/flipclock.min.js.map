{"version":3,"file":"flipclock.min.js","sources":["../src/js/Helpers/Functions.js","../src/js/Helpers/Digitize.js","../src/js/Helpers/Value.js","../src/js/Helpers/Validate.js","../src/js/Helpers/Language.js","../src/js/Helpers/Translate.js","../src/js/Helpers/Template.js","../src/js/Themes/Original/Divider.js","../src/js/Themes/Original/FlipClock.js","../src/js/Themes/Original/Group.js","../src/js/Themes/Original/Label.js","../src/js/Themes/Original/List.js","../src/js/Themes/Original/ListItem.js","../src/js/Themes/Original/Faces/DayCounter.js","../src/js/Themes/Original/Faces/HourCounter.js","../src/js/Themes/Original/Faces/MinuteCounter.js","../src/js/Themes/Original/Faces/TwentyFourHourClock.js","../src/js/Themes/Original/Faces/TwelveHourClock.js","../src/js/Themes/Original/Faces/WeekCounter.js","../src/js/Themes/Original/Faces/YearCounter.js","../src/js/Components/Component.js","../src/js/Components/FaceValue.js","../src/js/Config/ConsoleMessages.js","../src/js/Components/Face.js","../src/js/Languages/ar-ar.js","../src/js/Languages/ca-es.js","../src/js/Languages/cs-cz.js","../src/js/Languages/da-dk.js","../src/js/Languages/de-de.js","../src/js/Languages/en-us.js","../src/js/Languages/es-es.js","../src/js/Languages/fa-ir.js","../src/js/Languages/fi-fi.js","../src/js/Languages/fr-ca.js","../src/js/Languages/he-il.js","../src/js/Languages/hu-hu.js","../src/js/Languages/it-it.js","../src/js/Languages/ja-jp.js","../src/js/Languages/ko-kr.js","../src/js/Languages/lv-lv.js","../src/js/Languages/nl-be.js","../src/js/Languages/no-nb.js","../src/js/Languages/pl-pl.js","../src/js/Languages/pt-br.js","../src/js/Languages/ro-ro.js","../src/js/Languages/ru-ru.js","../src/js/Languages/sk-sk.js","../src/js/Languages/sv-se.js","../src/js/Languages/th-th.js","../src/js/Languages/tr-tr.js","../src/js/Languages/ua-ua.js","../src/js/Languages/vn-vn.js","../src/js/Languages/zh-cn.js","../src/js/Languages/zh-tw.js","../src/js/Components/DomComponent.js","../src/js/Components/Divider.js","../src/js/Components/ListItem.js","../src/js/Components/List.js","../src/js/Components/Group.js","../src/js/Components/Label.js","../src/js/Components/Timer.js","../src/js/Faces/Counter.js","../src/js/Faces/MinuteCounter.js","../src/js/Faces/HourCounter.js","../src/js/Faces/DayCounter.js","../src/js/Faces/TwentyFourHourClock.js","../src/js/Faces/TwelveHourClock.js","../src/js/Faces/WeekCounter.js","../src/js/Faces/YearCounter.js","../src/js/Config/DefaultValues.js","../src/js/Themes/Original/index.js","../src/js/Components/FlipClock.js"],"sourcesContent":["/**\r\n * These are a collection of helper functions, some borrowed from Lodash,\r\n * Underscore, etc, to provide common functionality without the need for using\r\n * a dependency. All of this is an attempt to reduce the file size of the\r\n * library.\r\n *\r\n * @namespace Helpers.Functions\r\n */\r\n\r\n/**\r\n * Throw a string as an Error exception.\r\n *\r\n * @function error\r\n * @param  {string} string - The error message.\r\n * @return {void}\r\n * @memberof Helpers.Functions\r\n */\r\nexport function error(string) {\r\n    throw Error(string);\r\n}\r\n\r\n/**\r\n * Check if `fn` is a function, and call it with `this` context and pass the\r\n * arguments.\r\n *\r\n * @function callback\r\n * @param  {string} string - The callback fn.\r\n * @param  {...*} args - The arguments to pass.\r\n * @return {void}\r\n * @memberof Helpers.Functions\r\n */\r\nexport function callback(fn, ...args) {\r\n    if(isFunction(fn)) {\r\n        return fn.call(this, ...args);\r\n    }\r\n}\r\n\r\n/**\r\n * Round the value to the correct value. Takes into account negative numbers.\r\n *\r\n * @function round\r\n * @param  {value} string - The value to round.\r\n * @return {string} - The rounded value.\r\n * @memberof Helpers.Functions\r\n */\r\nexport function round(value) {\r\n    return isNegativeZero(\r\n        value = isNegative(value) ? Math.ceil(value) : Math.floor(value)\r\n    ) ? ('-' + value).toString() : value;\r\n}\r\n\r\n/**\r\n * Returns `true` if `undefined or `null`.\r\n *\r\n * @function noop\r\n * @param  {value} string - The value to check.\r\n * @return {boolean} - `true` if `undefined or `null`.\r\n * @memberof Helpers.Functions\r\n */\r\nexport function noop(value) {\r\n    return !isUndefined(value) && !isNull(value);\r\n}\r\n\r\n/**\r\n * Returns a function that executes the `before` attribute and passes that value\r\n * to `after` and the subsequent value is returned.\r\n *\r\n * @function chain\r\n * @param  {function} before - The first function to execute.\r\n * @param  {function} after - The subsequent function to execute.\r\n * @return {function} - A function that executes the chain.\r\n * @memberof Helpers.Functions\r\n */\r\nexport function chain(before, after) {\r\n    return () => after(before());\r\n}\r\n\r\n/**\r\n * Returns a function that returns maps the values before concatenating them.\r\n *\r\n * @function concatMap\r\n * @param  {function} fn - The map callback function.\r\n * @return {function} - A function that executes the map and concatenation.\r\n * @memberof Helpers.Functions\r\n */\r\nexport function concatMap(fn) {\r\n    return x => {\r\n        return x.map(fn).reduce((x, y) => x.concat(y), []);\r\n    }\r\n}\r\n\r\n/**\r\n * Flatten an array.\r\n *\r\n * @function flatten\r\n * @param  {array} value - The array to flatten.\r\n * @return {array} - The flattened array.\r\n * @memberof Helpers.Functions\r\n */\r\nexport function flatten(value) {\r\n    return concatMap(value => value)(value)\r\n}\r\n\r\n/**\r\n * Deep flatten an array.\r\n *\r\n * @function deepFlatten\r\n * @param  {array} value - The array to flatten.\r\n * @return {array} - The flattened array.\r\n * @memberof Helpers.Functions\r\n */\r\nexport function deepFlatten(x) {\r\n    return concatMap(x => Array.isArray(x) ? deepFlatten (x) : x)(x);\r\n}\r\n\r\n/**\r\n * Capitalize the first letter in a string.\r\n *\r\n * @function ucfirst\r\n * @param  {string} string - The string to capitalize.\r\n * @return {string} - The capitalized string.\r\n * @memberof Helpers.Functions\r\n */\r\nexport function ucfirst(string) {\r\n    return string.charAt(0).toUpperCase() + string.slice(1);\r\n}\r\n\r\n/**\r\n * Returns the length of a deep flatten array.\r\n *\r\n * @function length\r\n * @param  {array} value - The array to count.\r\n * @return {number} - The length of the deep flattened array.\r\n * @memberof Helpers.Functions\r\n */\r\nexport function length(value) {\r\n    return deepFlatten(value).length;\r\n}\r\n\r\n/**\r\n * Determines if a value is a negative zero.\r\n *\r\n * @function isNegativeZero\r\n * @param  {number} value - The value to check.\r\n * @return {boolean} - Returns `true` if the value is a negative zero (`-0`).\r\n * @memberof Helpers.Functions\r\n */\r\nexport function isNegativeZero(value) {\r\n    return 1 / Math.round(value) === -Infinity;\r\n}\r\n\r\n/**\r\n * Determines if a value is a negative.\r\n *\r\n * @function isNegative\r\n * @param  {number} value - The value to check.\r\n * @return {boolean} - Returns `true` if the value is a negative.\r\n * @memberof Helpers.Functions\r\n */\r\nexport function isNegative(value) {\r\n    return isNegativeZero(value) || value < 0;\r\n}\r\n\r\n/**\r\n * Determines if a value is `null`.\r\n *\r\n * @function isNull\r\n * @param  {*} value - The value to check.\r\n * @return {boolean} - Returns `true` if the value is a `null`.\r\n * @memberof Helpers.Functions\r\n */\r\nexport function isNull(value) {\r\n    return value === null;// || typeof value === 'null';\r\n}\r\n\r\n/**\r\n * Determines if a value is `undefined`.\r\n *\r\n * @function isNull\r\n * @param  {*} value - The value to check.\r\n * @return {boolean} - Returns `true` if the value is a `undefined`.\r\n * @memberof Helpers.Functions\r\n */\r\nexport function isUndefined(value) {\r\n    return typeof value === 'undefined';\r\n}\r\n\r\n/**\r\n * Determines if a value is a constructor.\r\n *\r\n * @function isConstructor\r\n * @param  {*} value - The value to check.\r\n * @return {boolean} - Returns `true` if the value is a constructor.\r\n * @memberof Helpers.Functions\r\n */\r\nexport function isConstructor(value) {\r\n    return (value instanceof Function) && !!value.name;\r\n}\r\n\r\n/**\r\n * Determines if a value is a string.\r\n *\r\n * @function isString\r\n * @param  {*} value - The value to check.\r\n * @return {boolean} - Returns `true` if the value is a string.\r\n * @memberof Helpers.Functions\r\n */\r\nexport function isString(value) {\r\n    return typeof value === 'string';\r\n}\r\n\r\n/**\r\n * Determines if a value is a array.\r\n *\r\n * @function isString\r\n * @param  {*} value - The value to check.\r\n * @return {boolean} - Returns `true` if the value is a string.\r\n * @memberof Helpers.Functions\r\n */\r\nexport function isArray(value) {\r\n    return value instanceof Array;\r\n}\r\n\r\n/**\r\n * Determines if a value is an object.\r\n *\r\n * @function isObject\r\n * @param  {*} value - The value to check.\r\n * @return {boolean} - Returns `true` if the value is an object.\r\n * @memberof Helpers.Functions\r\n */\r\nexport function isObject(value) {\r\n    const type = typeof value;\r\n    return value != null && !isArray(value) && (\r\n        type == 'object' || type == 'function'\r\n    );\r\n}\r\n\r\n/**\r\n * Determines if a value is a function.\r\n *\r\n * @function isObject\r\n * @param  {*} value - The value to check.\r\n * @return {boolean} - Returns `true` if the value is a function.\r\n * @memberof Helpers.Functions\r\n */\r\nexport function isFunction(value) {\r\n    return value instanceof Function;\r\n}\r\n\r\n/**\r\n * Determines if a value is a number.\r\n *\r\n * @function isObject\r\n * @param  {*} value - The value to check.\r\n * @return {boolean} - Returns `true` if the value is a number.\r\n * @memberof Helpers.Functions\r\n */\r\nexport function isNumber(value) {\r\n    return !isNaN(value);\r\n}\r\n\r\n/**\r\n * Converts a string into kebab case.\r\n *\r\n * @function kebabCase\r\n * @param  {string} string - The string to convert.\r\n * @return {string} - The converted string.\r\n * @memberof Helpers.Functions\r\n */\r\nexport function kebabCase(string) {\r\n    return string.replace(/([a-z])([A-Z])/g, '$1-$2').replace(/\\s+/g, '-').toLowerCase();\r\n}\r\n","/**\r\n * @namespace Helpers.Digitize\r\n */\r\nimport { flatten } from './Functions';\r\nimport { deepFlatten } from './Functions';\r\n\r\n/**\r\n * Digitize a number, string, or an array into a digitized array. This function\r\n * use by the `Face`, which convert the digitized array into an array of `List`\r\n * instances.\r\n *\r\n * @function digitize\r\n * @param  {*} value - The value to digitize.\r\n * @param  {(Object|undefined)} [options] - The digitizer options.\r\n * @return {array} - The digitized array.\r\n * @memberof Helpers.Digitize\r\n */\r\nexport default function digitize(value, options) {\r\n    options = Object.assign({\r\n        minimumDigits: 0,\r\n        prependLeadingZero: true\r\n    }, options);\r\n\r\n    function prepend(number) {\r\n        const shouldPrependZero = options.prependLeadingZero &&\r\n            number.toString().split('').length === 1;\r\n\r\n        return (shouldPrependZero ? '0' : '').concat(number);\r\n    }\r\n\r\n    function digits(arr, min) {\r\n        const length = deepFlatten(arr).length;\r\n\r\n        if(length < min) {\r\n            for(let i = 0; i < min - length; i++) {\r\n                arr[0].unshift('0');\r\n            }\r\n        }\r\n\r\n        return arr;\r\n    }\r\n\r\n    return digits(flatten([value]).map(number => {\r\n        return flatten(deepFlatten([number]).map(number => {\r\n            return prepend(number).split('');\r\n        }));\r\n    }), options.minimumDigits || 0);\r\n}\r\n","/**\r\n * @namespace Helpers.Value\r\n */\r\n\r\n/**\r\n * An array of objects with min/max ranges.\r\n *\r\n * @private\r\n * @type {array}\r\n */\r\nconst RANGES = [{\r\n    // 0-9\r\n    min: 48,\r\n    max: 57\r\n},{\r\n    // a-z\r\n    min: 65,\r\n    max: 90\r\n},{\r\n    // A-Z\r\n    min: 97,\r\n    max: 122\r\n}];\r\n\r\n/**\r\n * Format a string into a new data type. Currently only supports string to\r\n * number conversion.\r\n *\r\n * @private\r\n * @function format\r\n * @param {string} string - The string to format.\r\n * @param {string} type - The data type (represented as a string) used to\r\n *     convert the string.\r\n * @return {boolean} - Returns the formatted string.\r\n */\r\nfunction format(string, type) {\r\n    switch(type) {\r\n        case 'number':\r\n            return parseFloat(string);\r\n    }\r\n\r\n    return string;\r\n}\r\n\r\n/**\r\n * Find the range object from the `RANGES` constant from the character given.\r\n * This is mainly an interval method, but can be used by faces to help\r\n * determine what the next value of a string should be.\r\n *\r\n * @private\r\n * @function format\r\n * @param {string} char - The char used to determine the range.\r\n * @param {string} type - The data type (represented as a string) used to\r\n *     convert the string.\r\n * @return {boolean} - Returns the formatted string.\r\n */\r\nfunction findRange(char) {\r\n    for(const i in RANGES) {\r\n        const code = char.toString().charCodeAt(0);\r\n\r\n        if(RANGES[i].min <= code && RANGES[i].max >= code) {\r\n            return RANGES[i];\r\n        }\r\n    }\r\n\r\n    return null;\r\n}\r\n\r\n/**\r\n * Create a string from a character code, which is returned by the callback.\r\n *\r\n * @private\r\n * @callback stringFromCharCodeBy\r\n * @param {string} char - The char used to determine the range.\r\n * @param {function} fn - The callback function receives `range` and `code`\r\n *     arguments. This function should return a character code.\r\n * @return {string} - Creates a string from the character code returned by the\r\n *     callback function.\r\n */\r\nfunction stringFromCharCodeBy(char, fn) {\r\n    return String.fromCharCode(\r\n        fn(findRange(char), char.charCodeAt(0))\r\n    );\r\n}\r\n\r\n/**\r\n * Calculate the next value for a string. 'a' becomes 'b'. 'A' becomes 'B'. 1\r\n * becomes 2, etc. If multiple character strings are passed, 'aa' would become\r\n * 'bb'.\r\n *\r\n * @function next\r\n * @param  {(string|number)} value - The string or number to convert.\r\n * @return {string} - The formatted string\r\n * @memberof Helpers.Value\r\n */\r\nexport function next(value) {\r\n    const converted = (value)\r\n        .toString()\r\n        .split('')\r\n        .map(char => stringFromCharCodeBy(char, (range, code) => {\r\n            return !range || code < range.max ? code + 1 : range.min\r\n        }))\r\n        .join('');\r\n\r\n    return format(converted, typeof value);\r\n}\r\n\r\n/**\r\n * Calculate the prev value for a string. 'b' becomes 'a'. 'B' becomes 'A'. 2\r\n * becomes 1, 0 becomes 9, etc. If multiple character strings are passed, 'bb'\r\n * would become 'aa'.\r\n *\r\n * @function prev\r\n * @param  {(string|number)} value - The string or number to convert.\r\n * @return {string} - The formatted string\r\n * @memberof Helpers.Value\r\n */\r\nexport function prev(value) {\r\n    const converted = (value)\r\n        .toString()\r\n        .split('')\r\n        .map(char => stringFromCharCodeBy(char, (range, code) => {\r\n            return !range || code > range.min ? code - 1 : range.max\r\n        }))\r\n        .join('');\r\n\r\n    return format(converted, typeof value);\r\n}\r\n","/**\r\n * @namespace Helpers.Validate\r\n */\r\nimport { isNull } from './Functions';\r\nimport { flatten } from './Functions';\r\nimport { isString } from './Functions';\r\nimport { isObject } from './Functions';\r\nimport { isFunction } from './Functions';\r\nimport { isConstructor } from './Functions';\r\n\r\n/**\r\n * Validate the data type of a variable.\r\n *\r\n * @function validate\r\n * @param {*} value - The value to validate.\r\n * @param {...*} args - The data types to use for validate.\r\n * @return {boolean} - Returns `true`is the value has a valid data type.\r\n * @memberof Helpers.Validate\r\n */\r\nexport default function validate(value, ...args) {\r\n    let success = false;\r\n\r\n    flatten(args).forEach(arg => {\r\n        if( (isNull(value) && isNull(arg)) ||\r\n            (isObject(arg) && (value instanceof arg)) ||\r\n            (isFunction(arg) && !isConstructor(arg) && arg(value) === true) ||\r\n            (isString(arg) && (typeof value === arg))) {\r\n            success = true;\r\n        }\r\n    });\r\n\r\n    return success;\r\n}\r\n","/**\r\n * @namespace Helpers.Language\r\n */\r\nimport * as LANGUAGES from '../Languages';\r\n\r\n/**\r\n * Return the language associated with the key. Returns `null` if no language is\r\n * found.\r\n * \r\n * @function language\r\n * @param  {string} name - The name or id of the language.\r\n * @return {object|null} - The language dictionary, or null if not found.\r\n * @memberof Helpers.Language\r\n */\r\nexport default function language(name) {\r\n    return name ? LANGUAGES[name.toLowerCase()] || Object.values(LANGUAGES).find(value => {\r\n        return value.aliases.indexOf(name) !== -1;\r\n    }) : null;\r\n}\r\n","/**\r\n * @namespace Helpers.Translate\r\n */\r\nimport language from './Language';\r\nimport { isString } from './Functions';\r\n\r\n/**\r\n * Translate an English string into another language.\r\n * \r\n * @function translate\r\n * @param {string} string - The string to translate.\r\n * @param {(string|object)} from - The language used to translate. If a string,\r\n *     the language is loaded into an object.\r\n * @return {string} - If no diction key is found, the untranslated string is\r\n *     returned.\r\n * @memberof Helpers.Translate\r\n */\r\nexport default function translate(string, from) {\r\n    const lang = isString(from) ? language(from) : from;\r\n    const dictionary = lang.dictionary || lang;\r\n    return dictionary[string] || string;\r\n};\r\n","/**\r\n * A collection of functions to manage DOM nodes and theme templates.\r\n *\r\n * @namespace Helpers.Template\r\n */\r\nimport { noop } from './Functions';\r\nimport { isArray } from './Functions';\r\nimport { isObject } from './Functions';\r\nimport { isString } from './Functions';\r\nimport { deepFlatten } from './Functions';\r\n\r\n/**\r\n * Swap a new DOM node with an existing one.\r\n *\r\n * @function swap\r\n * @param  {HTMLElement} subject - The new DOM node.\r\n * @param  {HTMLElement} existing - The existing DOM node.\r\n * @return {HTMLElement} - Returns the new element if it was mounted, otherwise\r\n *    the existing node is returned.\r\n * @memberof Helpers.Template\r\n */\r\nexport function swap(subject, existing) {\r\n\tif(existing.parentNode) {\r\n\t\texisting.parentNode.replaceChild(subject, existing);\r\n\r\n\t\treturn subject;\r\n\t}\r\n\r\n\treturn existing;\r\n}\r\n\r\n/**\r\n * Set the attribute of an element.\r\n *\r\n * @function setAttributes\r\n * @param  {HTMLElement} el - The DOM node that will receive the attributes.\r\n * @param  {Object|undefined} [attributes] - The attribute object, or if no object\r\n *     is passed, then the action is ignored.\r\n * @return {HTMLElement} el - The DOM node that received the attributes.\r\n * @memberof Helpers.Template\r\n */\r\nexport function setAttributes(el, attributes) {\r\n\tif(isObject(attributes)) {\r\n\t\tfor(const i in attributes) {\r\n\t\t\tel.setAttribute(i, attributes[i]);\r\n\t\t}\r\n\t}\r\n\r\n\treturn el;\r\n}\r\n\r\n/**\r\n * Append an array of DOM nodes to a parent.\r\n *\r\n * @function appendChildren\r\n * @param  {HTMLElement} el - The parent DOM node.\r\n * @param  {Array|undefined} [children] - The array of children. If no array\r\n *     is passed, then the method silently fails to run.\r\n * @return {HTMLElement} el - The DOM node that received the attributes.\r\n * @memberof Helpers.Template\r\n */\r\nexport function appendChildren(el, children) {\r\n\tif(isArray(children)) {\r\n\t\tchildren.filter(noop).forEach(child => {\r\n\t\t\tif(child instanceof HTMLElement) {\r\n\t\t\t\tel.appendChild(child);\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\treturn el;\r\n}\r\n\r\n/**\r\n * Create a new HTMLElement instance.\r\n *\r\n * @function createElement\r\n * @param  {HTMLElement} el - The parent DOM node.\r\n * @param  {Array|undefined} [children] - The array of children. If no array\r\n *     is passed, then the method silently fails to run.\r\n * @param  {Object|undefined} [attributes] - The attributes object.\r\n * @return {HTMLElement} el - The DOM node that received the attributes.\r\n * @memberof Helpers.Template\r\n */\r\nexport function createElement(el, children, attributes) {\r\n\tif(!(el instanceof HTMLElement)) {\r\n\t\tel = document.createElement(el);\r\n\t}\r\n\r\n\tsetAttributes(el, isObject(children) ? children : attributes);\r\n\r\n\tif(!isObject(children) && !isArray(children)) {\r\n\t\tel.innerHTML = children;\r\n\t}\r\n\telse {\r\n\t\tappendChildren(el, children)\r\n\t}\r\n\r\n\treturn el;\r\n}\r\n","import { appendChildren, createElement } from '../../Helpers/Template';\r\n\r\nexport default function(el, instance) {\r\n    appendChildren(el, [\r\n        createElement('div', {class: 'flip-clock-dot top'}),\r\n        createElement('div', {class: 'flip-clock-dot bottom'})\r\n    ]);\r\n}\r\n","import { next } from '../../Helpers/Value';\r\nimport { appendChildren } from '../../Helpers/Template';\r\n\r\nfunction child(el, index) {\r\n    return el ? (el.childNodes ? el.childNodes[index] : el[index]) : null;\r\n}\r\n\r\nfunction char(el) {\r\n    return el ? el.querySelector('.flip-clock-list-item:first-child .top').innerHTML : null;\r\n}\r\n\r\nexport default function(el, instance) {\r\n    const parts = instance.value.digits.map((group, x) => {\r\n        const groupEl = child(instance.el ? instance.el.querySelectorAll('.flip-clock-group') : null, x);\r\n\r\n        const lists = group.map((value, y) => {\r\n            const listEl = child(groupEl ? groupEl.querySelectorAll('.flip-clock-list') : null, y);\r\n            const listValue = char(listEl);\r\n\r\n            return instance.createList(value, {\r\n                domValue: listValue,\r\n                countdown: instance.countdown,\r\n                animationRate: instance.face.animationRate || instance.face.delay\r\n            });\r\n        });\r\n\r\n        return instance.createGroup(lists);\r\n    });\r\n\r\n    const nodes = parts.map(group => {\r\n        return group.render();\r\n    });\r\n\r\n    appendChildren(el, nodes);\r\n}\r\n","import { createElement, appendChildren } from '../../Helpers/Template';\r\n\r\nexport default function(el, instance) {\r\n    const items = instance.items.map(item => {\r\n        return item.render();\r\n    });\r\n\r\n    appendChildren(el, items);\r\n}\r\n","import { createElement } from '../../Helpers/Template';\r\n\r\nexport default function(el, instance) {\r\n    el.innerHTML = instance.t(instance.label);\r\n}\r\n","import { next, prev } from '../../Helpers/Value';\r\nimport ListItem from '../../Components/ListItem';\r\nimport { createElement, appendChildren } from '../../Helpers/Template';\r\n\r\nexport default function(el, instance) {\r\n    const beforeValue = instance.domValue || (\r\n        !instance.countdown ? prev(instance.value) : next(instance.value)\r\n    );\r\n\r\n    if( instance.domValue && instance.domValue !== instance.value) {\r\n        el.classList.add('flip');\r\n    }\r\n\r\n    el.style.animationDelay = `${instance.animationRate / 2}ms`;\r\n    el.style.animationDuration = `${instance.animationRate / 2}ms`;\r\n\r\n    instance.items = [\r\n        instance.createListItem(instance.value, {\r\n            active: true\r\n        }),\r\n        instance.createListItem(beforeValue, {\r\n            active: false\r\n        })\r\n    ];\r\n\r\n    appendChildren(el, instance.items.map(item => item.render()));\r\n}\r\n","import { createElement, appendChildren } from '../../Helpers/Template';\r\n\r\nexport default function(el, instance) {\r\n    const className = instance.active === true ? 'active' : (\r\n        instance.active === false ? 'before' : null\r\n    );\r\n\r\n    el.classList.add(className);\r\n\r\n    appendChildren(el, [\r\n        createElement('div', [\r\n            createElement('div', instance.value, {class: 'top'}),\r\n            createElement('div', instance.value, {class: 'bottom'})\r\n        ], {class: 'flip-clock-list-item-inner'})\r\n    ]);\r\n}\r\n","export default function(el, instance) {\r\n    instance.createDivider().mount(el, el.childNodes[1]);\r\n    instance.createDivider().mount(el, el.childNodes[3]);\r\n\r\n    if(instance.face.showSeconds) {\r\n        instance.createDivider().mount(el, el.childNodes[5]);\r\n    }\r\n\r\n    if(instance.face.showLabels) {\r\n        instance.createLabel('days').mount(el.childNodes[0]);\r\n        instance.createLabel('hours').mount(el.childNodes[2]);\r\n        instance.createLabel('minutes').mount(el.childNodes[4]);\r\n\r\n        if(instance.face.showSeconds) {\r\n            instance.createLabel('seconds').mount(el.childNodes[6]);\r\n        }\r\n    }\r\n}\r\n","export default function(el, instance) {\r\n    instance.createDivider().mount(el, el.childNodes[1]);\r\n\r\n    if(instance.face.showSeconds) {\r\n        instance.createDivider().mount(el, el.childNodes[3]);\r\n    }\r\n    \r\n    if(instance.face.showLabels) {\r\n        instance.createLabel('hours').mount(el.childNodes[0]);\r\n        instance.createLabel('minutes').mount(el.childNodes[2]);\r\n\r\n        if(instance.face.showSeconds) {\r\n            instance.createLabel('seconds').mount(el.childNodes[4]);\r\n        }\r\n    }\r\n}\r\n","export default function(el, instance) {\r\n    if(instance.face.showSeconds) {\r\n        instance.createDivider().mount(el, el.childNodes[1]);\r\n    }\r\n\r\n    if(instance.face.showLabels) {\r\n        instance.createLabel('minutes').mount(el.childNodes[0]);\r\n\r\n        if(instance.face.showSeconds) {\r\n            instance.createLabel('seconds').mount(el.childNodes[2]);\r\n        }\r\n    }\r\n}\r\n","export default function(el, instance) {\r\n    instance.createDivider().mount(el, el.childNodes[1]);\r\n\r\n    if(instance.face.showSeconds) {\r\n        instance.createDivider().mount(el, el.childNodes[3]);\r\n    }\r\n    \r\n    if(instance.face.showLabels) {\r\n        instance.createLabel('hours').mount(el.childNodes[0]);\r\n        instance.createLabel('minutes').mount(el.childNodes[2]);\r\n\r\n        if(instance.face.showSeconds) {\r\n            instance.createLabel('seconds').mount(el.childNodes[4]);\r\n        }\r\n    }\r\n\r\n}\r\n","import TwentyFourHourClock from './TwentyFourHourClock';\r\n\r\nexport default function(el, instance) {\r\n    TwentyFourHourClock(el, instance);\r\n\r\n    if(instance.face.showMeridium && instance.face.meridium) {\r\n        const label = instance.createLabel(instance.face.meridium);\r\n        const parent = el.childNodes[el.childNodes.length - 1];\r\n\r\n        label.mount(parent).classList.add('flip-clock-meridium');\r\n    }\r\n}\r\n","export default function(el, instance) {\r\n    instance.createDivider().mount(el, el.childNodes[1]);\r\n    instance.createDivider().mount(el, el.childNodes[3]);\r\n    instance.createDivider().mount(el, el.childNodes[5]);\r\n\r\n    if(instance.face.showSeconds) {\r\n        instance.createDivider().mount(el, el.childNodes[7]);\r\n    }\r\n\r\n    if(instance.face.showLabels) {\r\n        instance.createLabel('weeks').mount(el.childNodes[0]);\r\n        instance.createLabel('days').mount(el.childNodes[2]);\r\n        instance.createLabel('hours').mount(el.childNodes[4]);\r\n        instance.createLabel('minutes').mount(el.childNodes[6]);\r\n\r\n        if(instance.face.showSeconds) {\r\n            instance.createLabel('seconds').mount(el.childNodes[8]);\r\n        }\r\n    }\r\n}\r\n","export default function(el, instance) {\r\n    instance.createDivider().mount(el, el.childNodes[1]);\r\n    instance.createDivider().mount(el, el.childNodes[3]);\r\n    instance.createDivider().mount(el, el.childNodes[5]);\r\n    instance.createDivider().mount(el, el.childNodes[7]);\r\n\r\n    if(instance.face.showSeconds) {\r\n        instance.createDivider().mount(el, el.childNodes[9]);\r\n    }\r\n\r\n    if(instance.face.showLabels) {\r\n        instance.createLabel('years').mount(el.childNodes[0]);\r\n        instance.createLabel('weeks').mount(el.childNodes[2]);\r\n        instance.createLabel('days').mount(el.childNodes[4]);\r\n        instance.createLabel('hours').mount(el.childNodes[6]);\r\n        instance.createLabel('minutes').mount(el.childNodes[8]);\r\n\r\n        if(instance.face.showSeconds) {\r\n            instance.createLabel('seconds').mount(el.childNodes[10]);\r\n        }\r\n    }\r\n}\r\n","import { chain, error, callback, isObject, kebabCase } from '../Helpers/Functions';\r\n\r\nexport default class Component {\r\n\r\n    /**\r\n     * Abstract base class.\r\n     *\r\n     * @class Component\r\n     * @param {(object|undefined)} [attributes] - The instance attributes.\r\n     */\r\n    constructor(attributes) {\r\n        this.setAttribute(Object.assign({\r\n            events: {}\r\n        }, attributes));\r\n    }\r\n\r\n    /**\r\n     * Get the `name` attribute.\r\n     *\r\n     * @type {string}\r\n     */\r\n    get name() {\r\n        if(!(this.constructor.defineName instanceof Function)) {\r\n            error('Every class must define its name.');\r\n        }\r\n\r\n        return this.constructor.defineName();\r\n    }\r\n\r\n    /**\r\n     * The `events` attribute.\r\n     *\r\n     * @type {object}\r\n     */\r\n    get events() {\r\n        return this.$events || {};\r\n    }\r\n\r\n    set events(value) {\r\n        this.$events = value;\r\n    }\r\n\r\n    /**\r\n     * Emit an event.\r\n     *\r\n     * @param  {string} key - The event id/key.\r\n     * @return {Component} - Returns `this` instance.\r\n     */\r\n    emit(key, ...args) {\r\n        if(this.events[key]) {\r\n            this.events[key].forEach(event => {\r\n                event.apply(this, args);\r\n            });\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Start listening to an event.\r\n     *\r\n     * @param  {string} key - The event id/key.\r\n     * @param  {Function} fn - The listener callback function.\r\n     * @param  {boolean} [once=false] - Should the event handler be fired a\r\n     *     single time.\r\n     * @return {Component} - Returns `this` instance.\r\n     */\r\n    on(key, fn, once = false) {\r\n        if(!this.events[key]) {\r\n            this.events[key] = [];\r\n        }\r\n\r\n        this.events[key].push(fn);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Stop listening to an event.\r\n     *\r\n     * @param {string} key - The event id/key.\r\n     * @param {(Function|undefined)} fn - The listener callback function. If no\r\n     *     function is defined, all events with the specified id/key will be\r\n     *     removed. Otherwise, only the event listeners matching the id/key AND\r\n     *     callback will be removed.\r\n     * @return {Component} - Returns `this` instance.\r\n     */\r\n    off(key, fn) {\r\n        if(this.events[key] && fn) {\r\n            this.events[key] = this.events[key].filter(event => {\r\n                return event !== fn;\r\n            });\r\n        }\r\n        else {\r\n            this.events[key] = [];\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Listen to an event only one time.\r\n     *\r\n     * @param  {string} key - The event id/key.\r\n     * @param  {Function} fn - The listener callback function.\r\n     * @return {Component} - Returns `this` instance.\r\n     */\r\n    once(key, fn) {\r\n        fn = chain(fn, () => this.off(key, fn));\r\n\r\n        return this.on(key, fn, true);\r\n    }\r\n\r\n    /**\r\n     * Get an attribute. Returns null if no attribute is defined.\r\n     *\r\n     * @param  {string} key - The attribute name.\r\n     * @return {*} - The attribute value.\r\n     */\r\n    getAttribute(key) {\r\n        return this.hasOwnProperty(key) ? this[key] : null;\r\n    }\r\n\r\n    /**\r\n     * Get all the atttributes for this instance.\r\n     *\r\n     * @return {object} - The attribute dictionary.\r\n     */\r\n    getAttributes() {\r\n        const attributes = {};\r\n\r\n        Object.getOwnPropertyNames(this).forEach(key => {\r\n            attributes[key] = this.getAttribute(key);\r\n        });\r\n\r\n        return attributes;\r\n    }\r\n\r\n    /**\r\n     * Get only public the atttributes for this instance. Omits any attribute\r\n     * that starts with `$`, which is used internally.\r\n     *\r\n     * @return {object} - The attribute dictionary.\r\n     */\r\n    getPublicAttributes() {\r\n        return Object.keys(this.getAttributes())\r\n            .filter(key => {\r\n                return !key.match(/^\\$/);\r\n            })\r\n            .reduce((obj, key) => {\r\n                obj[key] = this.getAttribute(key);\r\n                return obj;\r\n            }, {});\r\n    }\r\n\r\n    /**\r\n     * Set an attribute key and value.\r\n     *\r\n     * @param  {string} key - The attribute name.\r\n     * @param  {*} value - The attribute value.\r\n     * @return {void}\r\n     */\r\n    setAttribute(key, value) {\r\n        if(isObject(key)) {\r\n            this.setAttributes(key);\r\n        }\r\n        else {\r\n            this[key] = value;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set an attributes by object of key/value pairs.\r\n     *\r\n     * @param  {object} values - The object dictionary.\r\n     * @return {void}\r\n     */\r\n    setAttributes(values) {\r\n        for(const i in values) {\r\n            this.setAttribute(i, values[i]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Helper method to execute the `callback()` function.\r\n     *\r\n     * @param  {Function} fn - The callback function.\r\n     * @return {*} - Returns the executed callback function.\r\n     */\r\n    callback(fn) {\r\n        return callback.call(this, fn);\r\n    }\r\n\r\n    /**\r\n     * Factor method to static instantiate new instances. Useful for writing\r\n     * clean expressive syntax with chained methods.\r\n     *\r\n     * @param  {...*} args - The callback arguments.\r\n     * @return {*} - The new component instance.\r\n     */\r\n    static make(...args) {\r\n        return new this(...args);\r\n    }\r\n\r\n}\r\n","import Component from './Component';\r\nimport digitize from '../Helpers/Digitize';\r\nimport { next, prev } from '../Helpers/Value';\r\nimport { length, isObject, isNumber } from '../Helpers/Functions';\r\n\r\nexport default class FaceValue extends Component {\r\n\r\n    /**\r\n     * The `FaceValue` class handles all the digitizing for the `Face`.\r\n     *\r\n     * @class FaceValue\r\n     * @extends Component\r\n     * @param {*} value - The `FaceValue`'s actual value. Most likely should\r\n     *     string, number, or Date. But since the Face handles the value, it\r\n     *     could be anything.\r\n     * @param {(object|undefined)} [attributes] - The instance attributes.\r\n     */\r\n    constructor(value, attributes) {\r\n        super(Object.assign({\r\n            format: value => value,\r\n            prependLeadingZero: true,\r\n            minimumDigits: 0\r\n        }, attributes));\r\n\r\n        if(!this.value) {\r\n            this.value = value;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The `digits` attribute.\r\n     *\r\n     * @type {(Array|undefined)}\r\n     */\r\n    get digits() {\r\n        return this.$digits;\r\n    }\r\n\r\n    set digits(value) {\r\n        this.$digits = value;\r\n        this.minimumDigits = Math.max(this.minimumDigits, length(value));\r\n    }\r\n\r\n    /**\r\n     * The `value` attribute.\r\n     *\r\n     * @type {*}\r\n     */\r\n    get value() {\r\n        return this.$value;\r\n    }\r\n\r\n    set value(value) {\r\n        this.$value = value;\r\n        this.digits = digitize(this.format(value), {\r\n            minimumDigits: this.minimumDigits,\r\n            prependLeadingZero: this.prependLeadingZero\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Returns `true` if the `value` attribute is not a number.\r\n     *\r\n     * @return {boolean} - `true` is the value is not a number.\r\n     */\r\n    isNaN() {\r\n        return isNaN(this.value);\r\n    }\r\n\r\n    /**\r\n     * Returns `true` if the `value` attribute is a number.\r\n     *\r\n     * @return {boolean} - `true` is the value is a number.\r\n     */\r\n    isNumber() {\r\n        return isNumber();\r\n    }\r\n\r\n    /**\r\n     * Clones the current `FaceValue` instance, but sets a new value to the\r\n     * cloned instance. Used for copying the current instance options and\r\n     * methods, but setting a new value.\r\n     *\r\n     * @param  {*} value - The n\r\n     * @param {(object|undefined)} [attributes] - The instance attributes.\r\n     * @return {FaceValue} - The cloned `FaceValue`.\r\n     */\r\n    clone(value, attributes) {\r\n        return new this.constructor(value, Object.assign(\r\n            this.getPublicAttributes(), attributes\r\n        ));\r\n    }\r\n\r\n    /**\r\n     * Define the name of the class.\r\n     *\r\n     * @return {string}\r\n     */\r\n    static defineName() {\r\n        return 'FaceValue';\r\n    }\r\n\r\n}\r\n","/**\r\n * @alias ConsoleMessages\r\n * @type {object}\r\n * @memberof module:Config/ConsoleMessages\r\n */\r\nexport default {\r\n    className: 'The className() is not defined.',\r\n    items: 'The items property must be an array.',\r\n    theme: 'The theme property must be an object.',\r\n    language: 'The language must be an object.',\r\n    date: 'The value must be an instance of a Date.',\r\n    face: 'The face must be an instance of a Face class.',\r\n    element: 'The element must be an instance of an HTMLElement',\r\n    faceValue: 'The face must be an instance of a FaceValue class.',\r\n    timer: 'The timer property must be an instance of a Timer class.'\r\n};\r\n","import Component from './Component';\r\nimport FaceValue from './FaceValue';\r\nimport validate from '../Helpers/Validate';\r\nimport ConsoleMessages from '../Config/ConsoleMessages';\r\nimport { error, isNull, isUndefined, isObject, isArray, isFunction, callback } from '../Helpers/Functions';\r\n\r\nexport default class Face extends Component {\r\n\r\n    /**\r\n     * This class is meant to be provide an interface for all other faces to\r\n     * extend.\r\n     *\r\n     * @class Face\r\n     * @extends Component\r\n     * @param {(FaceValue|object)} value - The `Face` value. If not an instance\r\n     *     of FaceValue, this argument is assumed to be the instance attributes.\r\n     * @param {(object|undefined)} [attributes] - The instance attributes.\r\n     */\r\n    constructor(value, attributes) {\r\n        if(!(value instanceof FaceValue) && isObject(value)) {\r\n            attributes = value;\r\n            value = undefined;\r\n        }\r\n\r\n        super();\r\n\r\n        this.setAttributes(Object.assign({\r\n            autoStart: true,\r\n            countdown: false,\r\n            animationRate: 500\r\n        }, this.defaultAttributes(), attributes || {}));\r\n\r\n        if(isNull(value) || isUndefined(value)) {\r\n            value = this.defaultValue();\r\n        }\r\n\r\n        if(value) {\r\n            this.value = value;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The `dataType` attribute.\r\n     *\r\n     * @type {*}\r\n     */\r\n    get dataType() {\r\n        return this.defaultDataType();\r\n    }\r\n\r\n    /**\r\n     * The `value` attribute.\r\n     *\r\n     * @type {*}\r\n     */\r\n    get value() {\r\n        return this.$value;\r\n    }\r\n\r\n    set value(value) {\r\n        if(!(value instanceof FaceValue)) {\r\n            value = this.createFaceValue(value);\r\n        }\r\n\r\n        this.$value = value;\r\n    }\r\n\r\n    /**\r\n     * The `stopAt` attribute.\r\n     *\r\n     * @type {*}\r\n     */\r\n    get stopAt() {\r\n        return this.$stopAt;\r\n    }\r\n\r\n    set stopAt(value) {\r\n        this.$stopAt = value;\r\n    }\r\n\r\n    /**\r\n     * The `originalValue` attribute.\r\n     *\r\n     * @type {*}\r\n     */\r\n    get originalValue() {\r\n        return this.$originalValue;\r\n    }\r\n\r\n    set originalValue(value) {\r\n        this.$originalValue = value;\r\n    }\r\n\r\n    /**\r\n     * This method is called with every interval, or every time the clock\r\n     * should change, and handles the actual incrementing and decrementing the\r\n     * clock's `FaceValue`.\r\n     *\r\n     * @param  {FlipClock} instance - The `FlipClock` instance.\r\n     * @param  {Function} fn - The interval callback.\r\n     * @return {Face} - This `Face` instance.\r\n     */\r\n    interval(instance, fn) {\r\n        if(this.countdown) {\r\n            this.decrement(instance);\r\n        }\r\n        else {\r\n            this.increment(instance);\r\n        }\r\n\r\n        callback.call(instance, fn);\r\n\r\n        if(this.shouldStop(instance)) {\r\n            instance.stop();\r\n        }\r\n\r\n        return instance.emit('interval');\r\n    }\r\n\r\n    /**\r\n     * Determines if the clock should stop or not.\r\n     *\r\n     * @param  {FlipClock} instance - The `FlipClock` instance.\r\n     * @return {boolean} - Returns `true` if the clock should stop.\r\n     */\r\n    shouldStop(instance) {\r\n        return !isUndefined(this.stopAt) ? this.stopAt === instance.value.value : false;\r\n    }\r\n\r\n    /**\r\n     * By default this just returns the value unformatted.\r\n     *\r\n     * @param  {FlipClock} instance - The `FlipClock` instance.\r\n     * @param  {*} value - The value to format.\r\n     * @return {*} - The formatted value.\r\n     */\r\n    format(instance, value) {\r\n        return value;\r\n    }\r\n\r\n    /**\r\n     * The default value for the `Face`.\r\n     *\r\n     * @return {*} - The default value.\r\n     */\r\n    defaultValue() {\r\n        //\r\n    }\r\n\r\n    /**\r\n     * The default attributes for the `Face`.\r\n     *\r\n     * @return {(Object|undefined)} - The default attributes.\r\n     */\r\n    defaultAttributes() {\r\n        //\r\n    }\r\n\r\n    /**\r\n     * The default data type for the `Face` value.\r\n     *\r\n     * @return {(Object|undefined)} - The default data type.\r\n     */\r\n    defaultDataType() {\r\n        //\r\n    }\r\n\r\n    /**\r\n     * Increment the clock.\r\n     *\r\n     * @param  {FlipClock} instance - The `FlipClock` instance.\r\n     * @param  {Number} [amount] - The amount to increment. If the amount is not\r\n     *     defined, it is left up to the `Face` to determine the default value.\r\n     * @return {void}\r\n     */\r\n    increment(instance, amount) {\r\n        //\r\n    }\r\n\r\n    /**\r\n     * Decrement the clock.\r\n     *\r\n     * @param  {FlipClock} instance - The `FlipClock` instance.\r\n     * @param  {Number} [amount] - The amount to decrement. If the amount is not\r\n     *     defined, it is left up to the `Face` to determine the default value.\r\n     * @return {void}\r\n     */\r\n    decrement(instance, amount) {\r\n        //\r\n    }\r\n\r\n    /**\r\n     * This method is called right after clock has started.\r\n     *\r\n     * @param  {FlipClock} instance - The `FlipClock` instance.\r\n     * @return {void}\r\n     */\r\n    started(instance) {\r\n        //\r\n    }\r\n\r\n    /**\r\n     * This method is called right after clock has stopped.\r\n     *\r\n     * @param  {FlipClock} instance - The `FlipClock` instance.\r\n     * @return {void}\r\n     */\r\n    stopped(instance) {\r\n        //\r\n    }\r\n\r\n    /**\r\n     * This method is called right after clock has reset.\r\n     *\r\n     * @param  {FlipClock} instance - The `FlipClock` instance.\r\n     * @return {void}\r\n     */\r\n    reset(instance) {\r\n        //\r\n    }\r\n\r\n    /**\r\n     * This method is called right after `Face` has initialized.\r\n     *\r\n     * @param  {FlipClock} instance - The `FlipClock` instance.\r\n     * @return {void}\r\n     */\r\n    initialized(instance) {\r\n        //\r\n    }\r\n\r\n    /**\r\n     * This method is called right after `Face` has rendered.\r\n     *\r\n     * @param  {FlipClock} instance - The `FlipClock` instance.\r\n     * @return {void}\r\n     */\r\n    rendered(instance) {\r\n        //\r\n    }\r\n\r\n    /**\r\n     * This method is called right after `Face` has mounted.\r\n     *\r\n     * @param  {FlipClock} instance - The `FlipClock` instance.\r\n     * @return {void}\r\n     */\r\n    mounted(instance) {\r\n        if(this.autoStart && instance.timer.isStopped) {\r\n            window.requestAnimationFrame(() => instance.start(instance));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Helper method to instantiate a new `FaceValue`.\r\n     *\r\n     * @param  {FlipClock} instance - The `FlipClock` instance.\r\n     * @param  {object|undefined} [attributes] - The attributes passed to the\r\n     *     `FaceValue` instance.\r\n     * @return {Divider} - The instantiated `FaceValue`.\r\n     */\r\n    createFaceValue(instance, value) {\r\n        return FaceValue.make(\r\n            isFunction(value) && !value.name ? value() : value, {\r\n                minimumDigits: this.minimumDigits,\r\n                format: value => this.format(instance, value)\r\n            }\r\n        );\r\n    }\r\n\r\n}\r\n","/**\r\n * @classdesc Arabic Language Pack\r\n * @desc This class will be used to translate tokens into the Arabic language.\r\n * @namespace Languages.Arabic\r\n */\r\n\r\n/**\r\n * @constant dictionary\r\n * @type {object}\r\n * @memberof Languages.Arabic\r\n */\r\nexport const dictionary = {\r\n    'years'   : 'سنوات',\r\n    'months'  : 'شهور',\r\n    'days'    : 'أيام',\r\n    'hours'   : 'ساعات',\r\n    'minutes' : 'دقائق',\r\n    'seconds' : 'ثواني'\r\n};\r\n\r\n/**\r\n * @constant aliases\r\n * @type {array}\r\n * @memberof Languages.Arabic\r\n */\r\nexport const aliases = ['ar', 'ar-ar', 'arabic'];\r\n","/**\r\n * @classdesc Catalan Language Pack\r\n * @desc This class will used to translate tokens into the Catalan language.\r\n * @namespace Languages.Catalan\r\n */\r\n\r\n/**\r\n * @constant dictionary\r\n * @type {object}\r\n * @memberof Languages.Catalan\r\n */\r\nexport const dictionary = {\r\n    'years' : 'Anys',\r\n    'months' : 'Mesos',\r\n    'days' : 'Dies',\r\n    'hours' : 'Hores',\r\n    'minutes' : 'Minuts',\r\n    'seconds' : 'Segons'\r\n};\r\n\r\n/**\r\n * @constant aliases\r\n * @type {array}\r\n * @memberof Languages.Catalan\r\n */\r\nexport const aliases = ['ca', 'ca-es', 'catalan'];\r\n","/**\r\n * @classdesc Czech Language Pack\r\n * @desc This class will used to translate tokens into the Czech language.\r\n * @namespace Languages.Czech\r\n */\r\n\r\n/**\r\n * @constant dictionary\r\n * @type {object}\r\n * @memberof Languages.Czech\r\n */\r\nexport const dictionary = {\r\n    'years'   : 'Roky',\r\n    'months'  : 'Měsíce',\r\n    'days'    : 'Dny',\r\n    'hours'   : 'Hodiny',\r\n    'minutes' : 'Minuty',\r\n    'seconds' : 'Sekundy'\r\n};\r\n\r\n/**\r\n * @constant aliases\r\n * @type {array}\r\n * @memberof Languages.Czech\r\n */\r\nexport const aliases = ['cs', 'cs-cz', 'cz', 'cz-cs', 'czech'];\r\n","/**\r\n * @classdesc Danish Language Pack\r\n * @desc This class will used to translate tokens into the Danish language.\r\n * @namespace Languages.Danish\r\n */\r\n\r\n/**\r\n * @constant dictionary\r\n * @type {object}\r\n * @memberof Languages.Danish\r\n */\r\nexport const dictionary = {\r\n\t'years'   : 'År',\r\n\t'months'  : 'Måneder',\r\n\t'days'    : 'Dage',\r\n\t'hours'   : 'Timer',\r\n\t'minutes' : 'Minutter',\r\n\t'seconds' : 'Sekunder'\r\n};\r\n\r\n/**\r\n * @constant aliases\r\n * @type {array}\r\n * @memberof Languages.Danish\r\n */\r\nexport const aliases = ['da', 'da-dk', 'danish'];\r\n","/**\r\n * @classdesc German Language Pack\r\n * @desc This class will used to translate tokens into the German language.\r\n * @namespace Languages.German\r\n */\r\n\r\n/**\r\n * @constant dictionary\r\n * @type {object}\r\n * @memberof Languages.German\r\n */\r\nexport const dictionary = {\r\n\t'years'   : 'Jahre',\r\n\t'months'  : 'Monate',\r\n\t'days'    : 'Tage',\r\n\t'hours'   : 'Stunden',\r\n\t'minutes' : 'Minuten',\r\n\t'seconds' : 'Sekunden'\r\n};\r\n\r\n/**\r\n * @constant aliases\r\n * @type {array}\r\n * @memberof Languages.German\r\n */\r\nexport const aliases = ['de', 'de-de', 'german'];\r\n","/**\r\n * @classdesc English Language Pack\r\n * @desc This class will used to translate tokens into the English language.\r\n * @namespace Languages.English\r\n */\r\n\r\n/**\r\n * @constant dictionary\r\n * @type {object}\r\n * @memberof Languages.English\r\n */\r\nexport const dictionary = {\r\n\t'years'   : 'Years',\r\n\t'months'  : 'Months',\r\n\t'days'    : 'Days',\r\n\t'hours'   : 'Hours',\r\n\t'minutes' : 'Minutes',\r\n\t'seconds' : 'Seconds'\r\n};\r\n\r\n/**\r\n * @constant aliases\r\n * @type {array}\r\n * @memberof Languages.English\r\n */\r\nexport const aliases = ['en', 'en-us', 'english'];\r\n","/**\r\n * @classdesc Spanish Language Pack\r\n * @desc This class will used to translate tokens into the Spanish language.\r\n * @namespace Languages.Spanish\r\n */\r\n\r\n/**\r\n * @constant dictionary\r\n * @type {object}\r\n * @memberof Languages.Spanish\r\n */\r\nexport const dictionary = {\r\n\t'years'   : 'Años',\r\n\t'months'  : 'Meses',\r\n\t'days'    : 'Días',\r\n\t'hours'   : 'Horas',\r\n\t'minutes' : 'Minutos',\r\n\t'seconds' : 'Segundos'\r\n};\r\n\r\n/**\r\n * @constant aliases\r\n * @type {array}\r\n * @memberof Languages.Spanish\r\n */\r\nexport const aliases = ['es', 'es-es', 'spanish'];\r\n","/**\r\n * @classdesc Persian Language Pack\r\n * @desc This class will used to translate tokens into the Persian language.\r\n * @namespace Languages.Persian\r\n */\r\n\r\n/**\r\n * @constant dictionary\r\n * @type {object}\r\n * @memberof Languages.Persian\r\n */\r\nexport const dictionary = {\r\n\t'years'   : 'سال',\r\n\t'months'  : 'ماه',\r\n\t'days'    : 'روز',\r\n\t'hours'   : 'ساعت',\r\n\t'minutes' : 'دقیقه',\r\n\t'seconds' : 'ثانیه'\r\n};\r\n\r\n/**\r\n * @constant aliases\r\n * @type {array}\r\n * @memberof Languages.Persian\r\n */\r\nexport const aliases = ['fa', 'fa-ir', 'persian'];\r\n","/**\r\n * @classdesc Finnish Language Pack\r\n * @desc This class will used to translate tokens into the Finnish language.\r\n * @namespace Languages.Finnish\r\n */\r\n\r\n/**\r\n * @constant dictionary\r\n * @type {object}\r\n * @memberof Languages.Finnish\r\n */\r\nexport const dictionary = {\r\n\t'years'   : 'Vuotta',\r\n\t'months'  : 'Kuukautta',\r\n\t'days'    : 'Päivää',\r\n\t'hours'   : 'Tuntia',\r\n\t'minutes' : 'Minuuttia',\r\n\t'seconds' : 'Sekuntia'\r\n};\r\n\r\n/**\r\n * @constant aliases\r\n * @type {array}\r\n * @memberof Languages.Finnish\r\n */\r\nexport const aliases = ['fi', 'fi-fi', 'finnish'];\r\n","/**\r\n * @classdesc Canadian French Language Pack\r\n * @desc This class will used to translate tokens into the Canadian French language.\r\n * @namespace Languages.CanadianFrench\r\n */\r\n\r\n/**\r\n * @constant dictionary\r\n * @type {object}\r\n * @memberof Languages.CanadianFrench\r\n */\r\nexport const dictionary = {\r\n    'years'   : 'Ans',\r\n    'months'  : 'Mois',\r\n    'days'    : 'Jours',\r\n    'hours'   : 'Heures',\r\n    'minutes' : 'Minutes',\r\n    'seconds' : 'Secondes'\r\n};\r\n\r\n/**\r\n * @constant aliases\r\n * @type {array}\r\n * @memberof Languages.CanadianFrench\r\n */\r\nexport const aliases = ['fr', 'fr-ca', 'french'];\r\n","/**\r\n * @classdesc Hebrew Language Pack\r\n * @desc This class will used to translate tokens into the Hebrew language.\r\n * @namespace Languages.Hebrew\r\n */\r\n\r\n/**\r\n * @constant dictionary\r\n * @type {object}\r\n * @memberof Languages.Hebrew\r\n */\r\nexport const dictionary = {\r\n\t'years'   : 'שנים',\r\n\t'months'  : 'חודש',\r\n\t'days'    : 'ימים',\r\n\t'hours'   : 'שעות',\r\n\t'minutes' : 'דקות',\r\n\t'seconds' : 'שניות'\r\n};\r\n\r\n/**\r\n * @constant aliases\r\n * @type {array}\r\n * @memberof Languages.Hebrew\r\n */\r\nexport const aliases = ['il', 'he-il', 'hebrew'];\r\n","/**\r\n * @classdesc Hungarian Language Pack\r\n * @desc This class will used to translate tokens into the Hungarian language.\r\n * @namespace Languages.Hungarian\r\n */\r\n\r\n/**\r\n * @constant dictionary\r\n * @type {object}\r\n * @memberof Languages.Hungarian\r\n */\r\nexport const dictionary = {\r\n\t'years'   : 'Év',\r\n    'months'  : 'Hónap',\r\n    'days'    : 'Nap',\r\n    'hours'   : 'Óra',\r\n    'minutes' : 'Perc',\r\n    'seconds' : 'Másodperc'\r\n};\r\n\r\n/**\r\n * @constant aliases\r\n * @type {array}\r\n * @memberof Languages.Hungarian\r\n */\r\nexport const aliases = ['hu', 'hu-hu', 'hungarian'];\r\n","/**\r\n * @classdesc Italian Language Pack\r\n * @desc This class will used to translate tokens into the Italian language.\r\n * @namespace Languages.Italian\r\n */\r\n\r\n/**\r\n * @constant dictionary\r\n * @type {object}\r\n * @memberof Languages.Italian\r\n */\r\nexport const dictionary = {\r\n\t'years'   : 'Anni',\r\n\t'months'  : 'Mesi',\r\n\t'days'    : 'Giorni',\r\n\t'hours'   : 'Ore',\r\n\t'minutes' : 'Minuti',\r\n\t'seconds' : 'Secondi'\r\n};\r\n\r\n/**\r\n * @constant aliases\r\n * @type {array}\r\n * @memberof Languages.Italian\r\n */\r\nexport const aliases = ['da', 'da-dk', 'danish'];\r\n","/**\r\n * @classdesc Japanese Language Pack\r\n * @desc This class will used to translate tokens into the Japanese language.\r\n * @namespace Languages.Japanese\r\n */\r\n\r\n/**\r\n * @constant dictionary\r\n * @type {object}\r\n * @memberof Languages.Japanese\r\n */\r\nexport const dictionary = {\r\n\t'years'   : '年',\r\n\t'months'  : '月',\r\n\t'days'    : '日',\r\n\t'hours'   : '時',\r\n\t'minutes' : '分',\r\n\t'seconds' : '秒'\r\n};\r\n\r\n/**\r\n * @constant aliases\r\n * @type {array}\r\n * @memberof Languages.Japanese\r\n */\r\nexport const aliases = ['jp', 'ja-jp', 'japanese'];\r\n","/**\r\n * @classdesc Korean Language Pack\r\n * @desc This class will used to translate tokens into the Korean language.\r\n * @namespace Languages.Korean\r\n */\r\n\r\n/**\r\n * @constant dictionary\r\n * @type {object}\r\n * @memberof Languages.Korean\r\n */\r\nexport const dictionary = {\r\n\t'years'   : '년',\r\n\t'months'  : '월',\r\n\t'days'    : '일',\r\n\t'hours'   : '시',\r\n\t'minutes' : '분',\r\n\t'seconds' : '초'\r\n};\r\n\r\n/**\r\n * @constant aliases\r\n * @type {array}\r\n * @memberof Languages.Korean\r\n */\r\nexport const aliases = ['ko', 'ko-kr', 'korean'];\r\n","/**\r\n * @classdesc Latvian Language Pack\r\n * @desc This class will used to translate tokens into the Latvian language.\r\n * @namespace Languages.Latvian\r\n */\r\n\r\n/**\r\n * @constant dictionary\r\n * @type {object}\r\n * @memberof Languages.Latvian\r\n */\r\nexport const dictionary = {\r\n    'years'   : 'Gadi',\r\n    'months'  : 'Mēneši',\r\n    'days'    : 'Dienas',\r\n    'hours'   : 'Stundas',\r\n    'minutes' : 'Minūtes',\r\n    'seconds' : 'Sekundes'\r\n};\r\n\r\n/**\r\n * @constant aliases\r\n * @type {array}\r\n * @memberof Languages.Latvian\r\n */\r\nexport const aliases = ['lv', 'lv-lv', 'latvian'];\r\n","/**\r\n * @classdesc Dutch Language Pack\r\n * @desc This class will used to translate tokens into the Dutch language.\r\n * @namespace Languages.Dutch\r\n */\r\n\r\n/**\r\n * @constant dictionary\r\n * @type {object}\r\n * @memberof Languages.Dutch\r\n */\r\nexport const dictionary = {\r\n    'years'   : 'Jaren',\r\n    'months'  : 'Maanden',\r\n    'days'    : 'Dagen',\r\n    'hours'   : 'Uren',\r\n    'minutes' : 'Minuten',\r\n    'seconds' : 'Seconden'\r\n};\r\n\r\n/**\r\n * @constant aliases\r\n * @type {array}\r\n * @memberof Languages.Dutch\r\n */\r\nexport const aliases = ['nl', 'nl-be', 'dutch'];\r\n","/**\r\n * @classdesc Norwegian-Bokmål Language Pack\r\n * @desc This class will used to translate tokens into the Norwegian-Bokmål language.\r\n * @namespace Languages.Norwegian\r\n */\r\n\r\n/**\r\n * @constant dictionary\r\n * @type {object}\r\n * @memberof Languages.Norwegian\r\n */\r\nexport const dictionary = {\r\n\t'years'   : 'År',\r\n\t'months'  : 'Måneder',\r\n\t'days'    : 'Dager',\r\n\t'hours'   : 'Timer',\r\n\t'minutes' : 'Minutter',\r\n\t'seconds' : 'Sekunder'\r\n};\r\n\r\n/**\r\n * @constant aliases\r\n * @type {array}\r\n * @memberof Languages.Norwegian\r\n */\r\nexport const aliases = ['no', 'nb', 'no-nb', 'norwegian'];\r\n","/**\r\n * @classdesc Polish Language Pack\r\n * @desc This class will used to translate tokens into the Polish language.\r\n * @namespace Languages.Polish\r\n */\r\n\r\n/**\r\n * @constant dictionary\r\n * @type {object}\r\n * @memberof Languages.Polish\r\n */\r\nexport const dictionary = {\r\n\t'years'   : 'Lat',\r\n\t'months'  : 'Miesięcy',\r\n\t'days'    : 'Dni',\r\n\t'hours'   : 'Godziny',\r\n\t'minutes' : 'Minuty',\r\n\t'seconds' : 'Sekundy'\r\n};\r\n\r\n/**\r\n * @constant aliases\r\n * @type {array}\r\n * @memberof Languages.Polish\r\n */\r\nexport const aliases = ['pl', 'pl-pl', 'polish'];\r\n","/**\r\n * @classdesc Portuguese Language Pack\r\n * @desc This class will used to translate tokens into the Portuguese language.\r\n * @namespace Languages.Portuguese\r\n */\r\n\r\n/**\r\n * @constant dictionary\r\n * @type {object}\r\n * @memberof Languages.Portuguese\r\n */\r\nexport const dictionary = {\r\n\t'years'   : 'Anos',\r\n\t'months'  : 'Meses',\r\n\t'days'    : 'Dias',\r\n\t'hours'   : 'Horas',\r\n\t'minutes' : 'Minutos',\r\n\t'seconds' : 'Segundos'\r\n};\r\n\r\n/**\r\n * @constant aliases\r\n * @type {array}\r\n * @memberof Languages.Portuguese\r\n */\r\nexport const aliases = ['pt', 'pt-br', 'portuguese'];\r\n","/**\r\n * @classdesc Romanian Language Pack\r\n * @desc This class will used to translate tokens into the Romanian language.\r\n * @namespace Languages.Romanian\r\n */\r\n\r\n/**\r\n * @constant dictionary\r\n * @type {object}\r\n * @memberof Languages.Romanian\r\n */\r\nexport const dictionary = {\r\n\t'years': 'Ani',\r\n\t'months': 'Luni',\r\n\t'days': 'Zile',\r\n\t'hours': 'Ore',\r\n\t'minutes': 'Minute',\r\n\t'seconds': 'sSecunde'\r\n};\r\n\r\n/**\r\n * @constant aliases\r\n * @type {array}\r\n * @memberof Languages.Romanian\r\n */\r\nexport const aliases = ['ro', 'ro-ro', 'romana'];\r\n","/**\r\n * @classdesc Russian Language Pack\r\n * @desc This class will used to translate tokens into the Russian language.\r\n * @namespace Languages.Russian\r\n */\r\n\r\n/**\r\n * @constant dictionary\r\n * @type {object}\r\n * @memberof Languages.Russian\r\n */\r\nexport const dictionary = {\r\n    'years'   : 'лет',\r\n    'months'  : 'месяцев',\r\n    'days'    : 'дней',\r\n    'hours'   : 'часов',\r\n    'minutes' : 'минут',\r\n    'seconds' : 'секунд'\r\n};\r\n\r\n/**\r\n * @constant aliases\r\n * @type {array}\r\n * @memberof Languages.Russian\r\n */\r\nexport const aliases = ['ru', 'ru-ru', 'russian'];\r\n","/**\r\n * @classdesc Slovak Language Pack\r\n * @desc This class will used to translate tokens into the Slovak language.\r\n * @namespace Languages.Slovak\r\n */\r\n\r\n/**\r\n * @constant dictionary\r\n * @type {object}\r\n * @memberof Languages.Slovak\r\n */\r\nexport const dictionary = {\r\n\t'years'   : 'Roky',\r\n\t'months'  : 'Mesiace',\r\n\t'days'    : 'Dni',\r\n\t'hours'   : 'Hodiny',\r\n\t'minutes' : 'Minúty',\r\n\t'seconds' : 'Sekundy'\r\n};\r\n\r\n/**\r\n * @constant aliases\r\n * @type {array}\r\n * @memberof Languages.Slovak\r\n */\r\nexport const aliases = ['sk', 'sk-sk', 'slovak'];\r\n","/**\r\n * @classdesc Swedish Language Pack\r\n * @desc This class will used to translate tokens into the Swedish language.\r\n * @namespace Languages.Swedish\r\n */\r\n\r\n/**\r\n * @constant dictionary\r\n * @type {object}\r\n * @memberof Languages.Swedish\r\n */\r\nexport const dictionary = {\r\n\t'years'   : 'År',\r\n\t'months'  : 'Månader',\r\n\t'days'    : 'Dagar',\r\n\t'hours'   : 'Timmar',\r\n\t'minutes' : 'Minuter',\r\n\t'seconds' : 'Sekunder'\r\n};\r\n\r\n/**\r\n * @constant aliases\r\n * @type {array}\r\n * @memberof Languages.Swedish\r\n */\r\nexport const aliases = ['sv', 'sv-se', 'swedish'];\r\n","/**\r\n * @classdesc Thai Language Pack\r\n * @desc This class will used to translate tokens into the Thai language.\r\n * @namespace Languages.Thai\r\n */\r\n\r\n/**\r\n * @constant dictionary\r\n * @type {object}\r\n * @memberof Languages.Thai\r\n */\r\nexport const dictionary = {\r\n\t'years'   : 'ปี',\r\n\t'months'  : 'เดือน',\r\n\t'days'    : 'วัน',\r\n\t'hours'   : 'ชั่วโมง',\r\n\t'minutes' : 'นาที',\r\n\t'seconds' : 'วินาที'\r\n};\r\n\r\n/**\r\n * @constant aliases\r\n * @type {array}\r\n * @memberof Languages.Thai\r\n */\r\nexport const aliases = ['th', 'th-th', 'thai'];\r\n","/**\r\n * @classdesc Turkish Language Pack\r\n * @desc This class will used to translate tokens into the Turkish language.\r\n * @namespace Languages.Turkish\r\n */\r\n\r\n/**\r\n * @constant dictionary\r\n * @type {object}\r\n * @memberof Languages.Turkish\r\n */\r\nexport const dictionary = {\r\n\t'years'   : 'Yıl',\r\n\t'months'  : 'Ay',\r\n\t'days'    : 'Gün',\r\n\t'hours'   : 'Saat',\r\n\t'minutes' : 'Dakika',\r\n\t'seconds' : 'Saniye'\r\n};\r\n\r\n/**\r\n * @constant aliases\r\n * @type {array}\r\n * @memberof Languages.Turkish\r\n */\r\nexport const aliases = ['tr', 'tr-tr', 'turkish'];\r\n","/**\r\n * @classdesc Ukrainian Language Pack\r\n * @desc This class will used to translate tokens into the Ukrainian language.\r\n * @namespace Languages.Ukrainian\r\n */\r\n\r\n/**\r\n * @constant dictionary\r\n * @type {object}\r\n * @memberof Languages.Ukrainian\r\n */\r\nexport const dictionary = {\r\n    'years'   : 'роки',\r\n    'months'  : 'місяці',\r\n    'days'    : 'дні',\r\n    'hours'   : 'години',\r\n    'minutes' : 'хвилини',\r\n    'seconds' : 'секунди'\r\n};\r\n\r\n/**\r\n * @constant aliases\r\n * @type {array}\r\n * @memberof Languages.Ukrainian\r\n */\r\nexport const aliases = ['ua', 'ua-ua', 'ukraine'];\r\n","/**\r\n * @classdesc Vietnamese Language Pack\r\n * @desc This class will used to translate tokens into the Vietnamese language.\r\n * @namespace Languages.Vietnamese\r\n */\r\n\r\n/**\r\n * @constant dictionary\r\n * @type {object}\r\n * @memberof Languages.Vietnamese\r\n */\r\nexport const dictionary = {\r\n\t'years'   : 'Năm',\r\n\t'months'  : 'Tháng',\r\n\t'days'    : 'Ngày',\r\n\t'hours'   : 'Giờ',\r\n\t'minutes' : 'Phút',\r\n\t'seconds' : 'Giây'\r\n};\r\n\r\n/**\r\n * @constant aliases\r\n * @type {array}\r\n * @memberof Languages.Vietnamese\r\n */\r\nexport const aliases = ['vn', 'vn-vn', 'vietnamese'];\r\n","/**\r\n * @classdesc Chinese Language Pack\r\n * @desc This class will used to translate tokens into the Chinese language.\r\n * @namespace Languages.Chinese\r\n */\r\n\r\n/**\r\n * @constant dictionary\r\n * @type {object}\r\n * @memberof Languages.Chinese\r\n */\r\nexport const dictionary = {\r\n\t'years'   : '年',\r\n\t'months'  : '月',\r\n\t'days'    : '日',\r\n\t'hours'   : '时',\r\n\t'minutes' : '分',\r\n\t'seconds' : '秒'\r\n};\r\n\r\n/**\r\n * @constant aliases\r\n * @type {array}\r\n * @memberof Languages.Chinese\r\n */\r\nexport const aliases = ['zh', 'zh-cn', 'chinese'];\r\n","/**\r\n * @classdesc Traditional Chinese Language Pack\r\n * @desc This class will used to translate tokens into the Traditional Chinese language.\r\n * @namespace Languages.TraditionalChinese\r\n */\r\n\r\n/**\r\n * @constant dictionary\r\n * @type {object}\r\n * @memberof Languages.TraditionalChinese\r\n */\r\nexport const dictionary = {\r\n\t'years'   : '年',\r\n\t'months'  : '月',\r\n\t'days'    : '日',\r\n\t'hours'   : '時',\r\n\t'minutes' : '分',\r\n\t'seconds' : '秒'\r\n};\r\n\r\n/**\r\n * @constant aliases\r\n * @type {array}\r\n * @memberof Languages.TraditionalChinese\r\n */\r\nexport const aliases = ['zh-tw'];\r\n","import Component from './Component';\r\nimport language from '../Helpers/Language';\r\nimport validate from '../Helpers/Validate';\r\nimport translate from '../Helpers/Translate';\r\nimport { isString } from '../Helpers/Functions';\r\nimport ConsoleMessages from '../Config/ConsoleMessages';\r\nimport { error, kebabCase } from '../Helpers/Functions';\r\nimport { swap, createElement } from '../Helpers/Template';\r\n\r\nexport default class DomComponent extends Component {\r\n\r\n    /**\r\n     * An abstract class that all other DOM components can extend.\r\n     *\r\n     * @class DomComponent\r\n     * @extends Component\r\n     * @param {(object|undefined)} [attributes] - The instance attributes.\r\n     */\r\n    constructor(attributes) {\r\n        super(Object.assign({\r\n            parent: null\r\n        }, attributes));\r\n\r\n        if(!this.theme) {\r\n            error(`${this.name} does not have a theme defined.`);\r\n        }\r\n\r\n        if(!this.language) {\r\n            error(`${this.name} does not have a language defined.`);\r\n        }\r\n\r\n\t\tif(!this.theme[this.name]) {\r\n            throw new Error(\r\n                `${this.name} cannot be rendered because it has no template.`\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The `className` attribute. Used for CSS.\r\n     *\r\n     * @type {string}\r\n     */\r\n    get className() {\r\n        return kebabCase(this.constructor.defineName());\r\n    }\r\n\r\n    /**\r\n     * The `el` attribute.\r\n     *\r\n     * @type {HTMLElement}\r\n     */\r\n    get el() {\r\n        return this.$el;\r\n    }\r\n\r\n    set el(value) {\r\n        if(!validate(value, null, HTMLElement)) {\r\n            error(ConsoleMessages.element);\r\n        }\r\n\r\n        this.$el = value;\r\n    }\r\n\r\n    /**\r\n     * The `parent` attribute. Parent is set when `DomComponent` instances are\r\n     * mounted.\r\n     *\r\n     * @type {DomComponent}\r\n     */\r\n    get parent() {\r\n        return this.$parent;\r\n    }\r\n\r\n    set parent(parent) {\r\n        this.$parent = parent;\r\n    }\r\n\r\n    /**\r\n     * The `theme` attribute.\r\n     *\r\n     * @type {object}\r\n     */\r\n    get theme() {\r\n        return this.$theme;\r\n    }\r\n\r\n    set theme(value) {\r\n        if(!validate(value, 'object')) {\r\n            error(ConsoleMessages.value);\r\n        }\r\n\r\n        this.$theme = value;\r\n    }\r\n\r\n    /**\r\n     * Get the language attribute.\r\n     *\r\n     * @type {object}\r\n     */\r\n    get language() {\r\n        return this.$language;\r\n    }\r\n\r\n    set language(value) {\r\n        if(isString(value)) {\r\n            value = language(value);\r\n        }\r\n\r\n        if(!validate(value, 'object')) {\r\n            error(ConsoleMessages.language);\r\n        }\r\n\r\n        this.$language = value;\r\n    }\r\n\r\n    /**\r\n     * Translate a string.\r\n     *\r\n     * @param  {string} string - The string to translate.\r\n     * @return {string} - The translated string. If no tranlation found, the\r\n     *     untranslated string is returned.\r\n     */\r\n    translate(string) {\r\n        return translate(string, this.language);\r\n    }\r\n\r\n    /**\r\n     * Alias to translate(string);\r\n     *\r\n     * @alias DomComponent.translate\r\n     */\r\n    t(string) {\r\n        return this.translate(string);\r\n    }\r\n\r\n    /**\r\n     * Render the DOM component.\r\n     *\r\n     * @return {HTMLElement} - The `el` attribute.\r\n     */\r\n\trender() {\r\n        const el = createElement('div', {\r\n            class: this.className === 'flip-clock' ? this.className : 'flip-clock-' + this.className\r\n        });\r\n\r\n        this.theme[this.name](el, this);\r\n\r\n        if(!this.el) {\r\n            this.el = el;\r\n        }\r\n        else if(this.el.innerHTML !== el.innerHTML) {\r\n            this.el = swap(el, this.el);\r\n        }\r\n\r\n        return this.el;\r\n\t}\r\n\r\n    /**\r\n     * Mount a DOM component to a parent node.\r\n     *\r\n     * @param  {HTMLElement} parent - The parent DOM node.\r\n     * @param  {(false|HTMLElement)} [before=false] - If `false`, element is\r\n     *     appended to the parent node. If an instance of an `HTMLElement`,\r\n     *     the component will be inserted before the specified element.\r\n     * @return {HTMLElement} - The `el` attribute.\r\n     */\r\n    mount(parent, before = false) {\r\n        this.render();\r\n        this.parent = parent;\r\n\r\n        if(!before) {\r\n            this.parent.appendChild(this.el);\r\n        }\r\n        else {\r\n            this.parent.insertBefore(this.el, before);\r\n        }\r\n\r\n        return this.el;\r\n    }\r\n\r\n}\r\n","import DomComponent from './DomComponent';\r\n\r\n/**\r\n * Create a new `Divider` instance.\r\n *\r\n * The purpose of this class is to return a unique class name so the theme can\r\n * render it appropriately, since each `DomComponent` can receive its own template\r\n * from the theme.\r\n *\r\n * @class Divider\r\n * @extends DomComponent\r\n * @param {(object|undefined)} [attributes] - The instance attributes.\r\n */\r\nexport default class Divider extends DomComponent {\r\n\r\n    /**\r\n     * Define the name of the class.\r\n     *\r\n     * @return {string}\r\n     */\r\n    static defineName() {\r\n        return 'Divider';\r\n    }\r\n\r\n}\r\n","import DomComponent from './DomComponent';\r\nimport { isObject } from '../Helpers/Functions';\r\n\r\nexport default class ListItem extends DomComponent {\r\n\r\n    /**\r\n     * This class is used to represent a single digits in a `List`.\r\n     *\r\n     * @class ListItem\r\n     * @extends DomComponent\r\n     * @param {(Number|String)} value - The value of the `ListItem`.\r\n     * @param {object|undefined} [attributes] - The instance attributes.\r\n     */\r\n    constructor(value, attributes) {\r\n        super(Object.assign({\r\n            value: value\r\n        }, isObject(value) ? value : null, attributes));\r\n    }\r\n\r\n    /**\r\n     * Define the name of the class.\r\n     *\r\n     * @return {string}\r\n     */\r\n    static defineName() {\r\n        return 'ListItem';\r\n    }\r\n\r\n}\r\n","import Divider from './Divider';\r\nimport ListItem from './ListItem';\r\nimport DomComponent from './DomComponent';\r\nimport { next, prev,  } from '../Helpers/Value';\r\nimport { isObject,  } from '../Helpers/Functions';\r\n\r\nexport default class List extends DomComponent {\r\n\r\n    /**\r\n     * This class is used to add a digit to the clock face. This class is called\r\n     * `List` because it contains a list of `ListItem`'s which are used to\r\n     * create flip effects. In the context of FlipClock.js a `List` represents\r\n     * one single digit.\r\n     *\r\n     * @class List\r\n     * @extends DomComponent\r\n     * @param {Number|String|Object} label - The active value. If an object, it\r\n     * is assumed that it is the instance attributes.\r\n     * @param {object|undefined} [attributes] - The instance attributes.\r\n     */\r\n    constructor(value, attributes) {\r\n        super(Object.assign({\r\n            value: value,\r\n            items: [],\r\n        }, isObject(value) ? value : null, attributes));\r\n    }\r\n\r\n    /**\r\n     * Get the `value` attribute.\r\n     *\r\n     * @type {(Number|String)}\r\n     */\r\n    get value() {\r\n        return this.$value;\r\n    }\r\n    set value(value) {\r\n        this.$value = value;\r\n    }\r\n\r\n    /**\r\n     * Get the `items` attribute.\r\n     *\r\n     * @type {(Number|String)}\r\n     */\r\n    get items() {\r\n        return this.$items;\r\n    }\r\n\r\n    set items(value) {\r\n        this.$items = value;\r\n    }\r\n\r\n    /**\r\n     * Helper method to instantiate a new `ListItem`.\r\n     *\r\n     * @param  {(Number|String)} value - The `ListItem` value.\r\n     * @param  {(Object|undefined)} [attributes] - The instance attributes.\r\n     * @return {ListItem} - The instantiated `ListItem`.\r\n     */\r\n    createListItem(value, attributes) {\r\n        const item = new ListItem(value, Object.assign({\r\n            theme: this.theme,\r\n            language: this.language\r\n        }, attributes));\r\n\r\n        this.$items.push(item);\r\n\r\n        return item;\r\n    }\r\n\r\n    /**\r\n     * Define the name of the class.\r\n     *\r\n     * @return {string}\r\n     */\r\n    static defineName() {\r\n        return 'List';\r\n    }\r\n\r\n}\r\n","import DomComponent from './DomComponent';\r\nimport { isObject, isArray } from '../Helpers/Functions';\r\n\r\nexport default class Group extends DomComponent {\r\n\r\n    /**\r\n     * This class is used to group values within a clock face. How the groups\r\n     * are displayed is determined by the theme.\r\n     *\r\n     * @class Group\r\n     * @extends DomComponent\r\n     * @param {Array|Object} items - An array `List` instances or an object of\r\n     *     attributes. If not an array, assumed to be the attributes.\r\n     * @param {object|undefined} [attributes] - The instance attributes.\r\n     */\r\n    constructor(items, attributes) {\r\n        super(Object.assign({\r\n            items: isArray(items) ? items : []\r\n        }, (isObject(items) ? items : null), attributes));\r\n    }\r\n\r\n    /**\r\n     * Define the name of the class.\r\n     *\r\n     * @return {string}\r\n     */\r\n    static defineName() {\r\n        return 'Group';\r\n    }\r\n\r\n}\r\n","import DomComponent from './DomComponent';\r\nimport { isObject } from '../Helpers/Functions';\r\n\r\nexport default class Label extends DomComponent {\r\n\r\n    /**\r\n     * This class is used to add a label to the clock face.\r\n     *\r\n     * @class Label\r\n     * @extends DomComponent\r\n     * @param {Number|String|Object} label - The label attribute. If an object,\r\n     *     it is assumed that it is the instance attributes.\r\n     * @param {object|undefined} [attributes] - The instance attributes.\r\n     */\r\n    constructor(label, attributes) {\r\n        super(Object.assign({\r\n            label: label\r\n        }, (isObject(label) ? label : null), attributes));\r\n    }\r\n\r\n    /**\r\n     * Define the name of the class.\r\n     *\r\n     * @return {string}\r\n     */\r\n    static defineName() {\r\n        return 'Label';\r\n    }\r\n\r\n}\r\n","import Component from './Component';\r\nimport { isObject, isNumber, callback } from '../Helpers/Functions';\r\n\r\nexport default class Timer extends Component {\r\n\r\n    /**\r\n     * Create a new `Timer` instance.\r\n     *\r\n     * @class Timer\r\n     * @extends Component\r\n     * @param {(Object|Number)} interval - The interval passed as a `Number`,\r\n     *     or can set the attribute of the class with an object.\r\n     */\r\n    constructor(interval) {\r\n        super(Object.assign({\r\n            count: 0,\r\n            handle: null,\r\n            started: null,\r\n            running: false,\r\n            interval: isNumber(interval) ? interval : null,\r\n        }, isObject(interval) ? interval : null));\r\n    }\r\n\r\n    /**\r\n     * The `elapsed` attribute.\r\n     *\r\n     * @type {Number}\r\n     */\r\n    get elapsed() {\r\n        return !this.lastLoop ? 0 : this.lastLoop - (\r\n            this.started ? this.started.getTime() : new Date().getTime()\r\n        );\r\n    }\r\n\r\n    /**\r\n     * The `isRunning` attribute.\r\n     *\r\n     * @type {boolean}\r\n     */\r\n    get isRunning() {\r\n        return this.running === true;\r\n    }\r\n\r\n    /**\r\n     * The `isStopped` attribute.\r\n     *\r\n     * @type {boolean}\r\n     */\r\n    get isStopped() {\r\n        return this.running === false;\r\n    }\r\n\r\n    /**\r\n     * Resets the timer.\r\n     *\r\n     * @param  {(Function|undefined)} fn - The interval callback.\r\n     * @return {Timer} - The `Timer` instance.\r\n     */\r\n    reset(fn) {\r\n        this.stop(() => {\r\n            this.count = 0;\r\n            this.start(() => callback.call(this, fn));\r\n            this.emit('reset');\r\n        });\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Starts the timer.\r\n     *\r\n     * @param  {Function} fn - The interval callback.\r\n     * @return {Timer} - The `Timer` instance.\r\n     */\r\n    start(fn) {\r\n        this.started = new Date;\r\n        this.lastLoop = Date.now();\r\n        this.running = true;\r\n        this.emit('start');\r\n\r\n        const loop = () => {\r\n            if(Date.now() - this.lastLoop >= this.interval) {\r\n                callback.call(this, fn);\r\n                this.lastLoop = Date.now();\r\n                this.emit('interval');\r\n                this.count++;\r\n            }\r\n\r\n            this.handle = window.requestAnimationFrame(loop);\r\n\r\n            return this;\r\n        };\r\n\r\n        return loop();\r\n    }\r\n\r\n    /**\r\n     * Stops the timer.\r\n     *\r\n     * @param  {Function} fn - The stop callback.\r\n     * @return {Timer} - The `Timer` instance.\r\n     */\r\n    stop(fn) {\r\n        if(this.isRunning) {\r\n            setTimeout(() => {\r\n                window.cancelAnimationFrame(this.handle);\r\n\r\n                this.running = false;\r\n\r\n                callback.call(this, fn);\r\n\r\n                this.emit('stop');\r\n            });\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Define the name of the class.\r\n     *\r\n     * @return {string}\r\n     */\r\n    static defineName() {\r\n        return 'Timer';\r\n    }\r\n}\r\n","import Face from '../Components/Face';\r\n\r\n/**\r\n * @classdesc This face is designed to increment and decrement numberic values,\r\n *     not `Date` objects.\r\n * @extends Face\r\n * @param {(FaceValue|object)} value - The `Face` value. If not an instance\r\n *     of FaceValue, this argument is assumed to be the instance attributes.\r\n * @param {(object|undefined)} [attributes] - The instance attributes.\r\n * @memberof Faces\r\n */\r\nexport default class Counter extends Face {\r\n\r\n    increment(instance, value = 1) {\r\n        instance.value = this.value.value + value;\r\n    }\r\n\r\n    decrement(instance, value = 1) {\r\n        instance.value = this.value.value - value;\r\n    }\r\n\r\n    /**\r\n     * Define the name of the class.\r\n     *\r\n     * @return {string}\r\n     */\r\n    static defineName() {\r\n        return 'Counter';\r\n    }\r\n}\r\n","import Face from '../Components/Face';\r\nimport {isNull, isNumber, isUndefined, noop, round} from '../Helpers/Functions';\r\n\r\n/**\r\n * @classdesc This face is meant to display a clock that shows minutes, and\r\n *     seconds.\r\n * @extends Face\r\n * @param {(FaceValue|object)} value - The `Face` value. If not an instance\r\n *     of FaceValue, this argument is assumed to be the instance attributes.\r\n * @param {(object|undefined)} [attributes] - The instance attributes.\r\n * @memberof Faces\r\n */\r\nexport default class MinuteCounter extends Face {\r\n\r\n    defaultDataType() {\r\n        return Date;\r\n    }\r\n\r\n    defaultAttributes() {\r\n        return {\r\n            showSeconds: true,\r\n            showLabels: true\r\n        };\r\n    }\r\n\r\n    shouldStop(instance) {\r\n        if(isNull(instance.stopAt) || isUndefined(instance.stopAt)) {\r\n            return false;\r\n        }\r\n\r\n        if(this.stopAt instanceof Date) {\r\n            return this.countdown ?\r\n                this.stopAt.getTime() >= this.value.value.getTime():\r\n                this.stopAt.getTime() <= this.value.value.getTime();\r\n        }\r\n        else if(isNumber(this.stopAt)) {\r\n            const diff = Math.floor((this.value.value.getTime() - this.originalValue.getTime()) / 1000);\r\n\r\n            return this.countdown ?\r\n                this.stopAt >= diff:\r\n                this.stopAt <= diff;\r\n        }\r\n\r\n        throw new Error(`the stopAt property must be an instance of Date or Number.`);\r\n    }\r\n\r\n    increment(instance, value = 0) {\r\n        instance.value = new Date(this.value.value.getTime() + value + (new Date().getTime() - instance.timer.lastLoop));\r\n    }\r\n\r\n    decrement(instance, value = 0) {\r\n        instance.value = new Date(this.value.value.getTime() - value - (new Date().getTime() - instance.timer.lastLoop));\r\n    }\r\n\r\n    format(instance, value) {\r\n        const started = instance.timer.isRunning ? instance.timer.started : new Date;\r\n\r\n        return [\r\n            [this.getMinutes(value, started)],\r\n            this.showSeconds ? [this.getSeconds(value, started)] : null\r\n        ].filter(noop);\r\n    }\r\n\r\n    getMinutes(a, b) {\r\n        return round(this.getTotalSeconds(a, b) / 60);\r\n    }\r\n\r\n    getSeconds(a, b) {\r\n        const totalSeconds = this.getTotalSeconds(a, b);\r\n\r\n        return Math.abs(Math.ceil(totalSeconds === 60 ? 0 : totalSeconds % 60));\r\n    }\r\n\r\n    getTotalSeconds(a, b) {\r\n        return a.getTime() === b.getTime() ? 0 : Math.round((a.getTime() - b.getTime()) / 1000);\r\n    }\r\n\r\n    /**\r\n     * Define the name of the class.\r\n     *\r\n     * @return {string}\r\n     */\r\n    static defineName() {\r\n        return 'MinuteCounter';\r\n    }\r\n}\r\n","import MinuteCounter from './MinuteCounter';\r\n\r\n/**\r\n * @classdesc This face is meant to display a clock that shows\r\n *     hours, minutes, and seconds.\r\n * @extends Face\r\n * @param {(FaceValue|object)} value - The `Face` value. If not an instance\r\n *     of FaceValue, this argument is assumed to be the instance attributes.\r\n * @param {(object|undefined)} [attributes] - The instance attributes.\r\n * @memberof Faces\r\n */\r\nexport default class HourCounter extends MinuteCounter {\r\n\r\n    format(instance, value) {\r\n        const now = !instance.timer.started ? new Date : instance.timer.started;\r\n        const originalValue = value || instance.originalValue;\r\n        const a = !this.countdown ? now : originalValue;\r\n        const b = !this.countdown ? originalValue : now;\r\n\r\n        const data = [\r\n            [this.getHours(a, b)],\r\n            [this.getMinutes(a, b)]\r\n        ];\r\n\r\n        if(this.showSeconds) {\r\n            data.push([this.getSeconds(a, b)]);\r\n        }\r\n\r\n        return data;\r\n    }\r\n\r\n    getMinutes(a, b) {\r\n        return Math.abs(super.getMinutes(a, b) % 60);\r\n    }\r\n\r\n    getHours(a, b) {\r\n        return Math.floor(this.getTotalSeconds(a, b) / 60 / 60);\r\n    }\r\n\r\n    /**\r\n     * Define the name of the class.\r\n     *\r\n     * @return {string}\r\n     */\r\n    static defineName() {\r\n        return 'HourCounter';\r\n    }\r\n}\r\n","import HourCounter from './HourCounter';\r\n\r\n/**\r\n * @classdesc This face is meant to display a clock that shows days, hours,\r\n *     minutes, and seconds.\r\n * @extends HourCounter\r\n * @param {(FaceValue|object)} value - The `Face` value. If not an instance\r\n *     of FaceValue, this argument is assumed to be the instance attributes.\r\n * @param {(object|undefined)} [attributes] - The instance attributes.\r\n * @memberof Faces\r\n */\r\nexport default class DayCounter extends HourCounter {\r\n\r\n    format(instance, value) {\r\n        const now = !instance.started ? new Date : value;\r\n        const originalValue = value || instance.originalValue;\r\n        const a = !this.countdown ? now : originalValue;\r\n        const b = !this.countdown ? originalValue : now;\r\n\r\n        const data = [\r\n            [this.getDays(a, b)],\r\n            [this.getHours(a, b)],\r\n            [this.getMinutes(a, b)]\r\n        ];\r\n\r\n        if(this.showSeconds) {\r\n            data.push([this.getSeconds(a, b)]);\r\n        }\r\n\r\n        return data;\r\n    }\r\n\r\n    getDays(a, b) {\r\n        return Math.floor(this.getTotalSeconds(a, b) / 60 / 60 / 24);\r\n    }\r\n\r\n    getHours(a, b) {\r\n        return Math.abs(super.getHours(a, b) % 24);\r\n    }\r\n\r\n    /**\r\n     * Define the name of the class.\r\n     *\r\n     * @return {string}\r\n     */\r\n    static defineName() {\r\n        return 'DayCounter';\r\n    }\r\n}\r\n","import Face from '../Components/Face';\r\nimport { callback } from '../Helpers/Functions';\r\n\r\n/**\r\n * @classdesc This face shows the current time in twenty-four hour format.\r\n * @extends Face\r\n * @param {(FaceValue|object)} value - The `Face` value. If not an instance\r\n *     of FaceValue, this argument is assumed to be the instance attributes.\r\n * @param {(object|undefined)} [attributes] - The instance attributes.\r\n * @memberof Faces\r\n */\r\nexport default class TwentyFourHourClock extends Face {\r\n\r\n    defaultDataType() {\r\n        return Date;\r\n    }\r\n\r\n    defaultValue() {\r\n        return new Date;\r\n    }\r\n\r\n    defaultAttributes() {\r\n        return {\r\n            showSeconds: true,\r\n            showLabels: false\r\n        };\r\n    }\r\n\r\n    format(instance, value) {\r\n        if(!value) {\r\n            value = new Date;\r\n        }\r\n\r\n        const groups = [\r\n            [value.getHours()],\r\n            [value.getMinutes()]\r\n        ];\r\n\r\n        if(this.showSeconds) {\r\n            groups.push([value.getSeconds()]);\r\n        }\r\n\r\n        return groups;\r\n    }\r\n\r\n    increment(instance, offset = 0) {\r\n        instance.value = new Date(this.value.value.getTime() + offset + (new Date().getTime() - instance.timer.lastLoop));\r\n    }\r\n\r\n    decrement(instance, offset = 0) {\r\n        instance.value = new Date(this.value.value.getTime() - offset - (new Date().getTime() - instance.timer.lastLoop));\r\n    }\r\n\r\n    /**\r\n     * Define the name of the class.\r\n     *\r\n     * @return {string}\r\n     */\r\n    static defineName() {\r\n        return 'TwentyFourHourClock';\r\n    }\r\n}\r\n","import TwentyFourHourClock from './TwentyFourHourClock';\r\n\r\n/**\r\n * @classdesc This face shows the current time in twelve hour format, with AM\r\n *     and PM.\r\n * @extends Face\r\n * @param {(FaceValue|object)} value - The `Face` value. If not an instance\r\n *     of FaceValue, this argument is assumed to be the instance attributes.\r\n * @param {(object|undefined)} [attributes] - The instance attributes.\r\n * @memberof Faces\r\n */\r\nexport default class TwelveHourClock extends TwentyFourHourClock {\r\n\r\n    defaultAttributes() {\r\n        return {\r\n            showLabels: false,\r\n            showSeconds: true,\r\n            showMeridium: true\r\n        };\r\n    }\r\n\r\n    format(instance, value) {\r\n        if(!value) {\r\n            value = new Date;\r\n        }\r\n\r\n        const hours = value.getHours();\r\n\t\tconst groups = [\r\n\t\t\thours > 12 ? hours - 12 : (hours === 0 ? 12 : hours),\r\n\t\t\tvalue.getMinutes()\r\n\t\t];\r\n\r\n        this.meridium = hours > 12 ? 'pm' : 'am';\r\n\r\n\t\tif(this.showSeconds) {\r\n\t\t\tgroups.push(value.getSeconds());\r\n\t\t}\r\n\r\n\t\treturn groups;\r\n    }\r\n\r\n    /**\r\n     * Define the name of the class.\r\n     *\r\n     * @return {string}\r\n     */\r\n    static defineName() {\r\n        return 'TwelveHourClock';\r\n    }\r\n}\r\n","import DayCounter from './DayCounter';\r\n\r\n/**\r\n * @classdesc This face is meant to display a clock that shows weeks, days,\r\n *     hours, minutes, and seconds.\r\n * @extends Face\r\n * @param {(FaceValue|object)} value - The `Face` value. If not an instance\r\n *     of FaceValue, this argument is assumed to be the instance attributes.\r\n * @param {(object|undefined)} [attributes] - The instance attributes.\r\n * @memberof Faces\r\n */\r\nexport default class WeekCounter extends DayCounter {\r\n\r\n    format(instance, value) {\r\n        const now = !instance.timer.started ? new Date : value;\r\n        const originalValue = value || instance.originalValue;\r\n        const a = !this.countdown ? now : originalValue;\r\n        const b = !this.countdown ? originalValue : now;\r\n\r\n        const data = [\r\n            [this.getWeeks(a, b)],\r\n            [this.getDays(a, b)],\r\n            [this.getHours(a, b)],\r\n            [this.getMinutes(a, b)]\r\n        ];\r\n\r\n        if(this.showSeconds) {\r\n            data.push([this.getSeconds(a, b)]);\r\n        }\r\n\r\n        return data;\r\n    }\r\n\r\n    getWeeks(a, b) {\r\n        return Math.floor(this.getTotalSeconds(a, b) / 60 / 60 / 24 / 7);\r\n    }\r\n\r\n    getDays(a, b) {\r\n        return Math.abs(super.getDays(a, b) % 7);\r\n    }\r\n\r\n    /**\r\n     * Define the name of the class.\r\n     *\r\n     * @return {string}\r\n     */\r\n    static defineName() {\r\n        return 'WeekCounter';\r\n    }\r\n}\r\n","import WeekCounter from './WeekCounter';\r\n\r\n/**\r\n * @classdesc This face is meant to display a clock that shows years, weeks,\r\n *     days, hours, minutes, and seconds.\r\n * @extends Face\r\n * @param {(FaceValue|object)} value - The `Face` value. If not an instance\r\n *     of FaceValue, this argument is assumed to be the instance attributes.\r\n * @param {(object|undefined)} [attributes] - The instance attributes.\r\n * @memberof Faces\r\n */\r\nexport default class YearCounter extends WeekCounter {\r\n\r\n    format(instance, value) {\r\n        const now = !instance.timer.started ? new Date : value;\r\n        const originalValue = value || instance.originalValue;\r\n        const a = !this.countdown ? now : originalValue;\r\n        const b = !this.countdown ? originalValue : now;\r\n\r\n        const data = [\r\n            [this.getYears(a, b)],\r\n            [this.getWeeks(a, b)],\r\n            [this.getDays(a, b)],\r\n            [this.getHours(a, b)],\r\n            [this.getMinutes(a, b)]\r\n        ];\r\n\r\n        if(this.showSeconds) {\r\n            data.push([this.getSeconds(a, b)]);\r\n        }\r\n\r\n        return data;\r\n    }\r\n\r\n    getYears(a, b) {\r\n        return Math.floor(Math.max(0, this.getTotalSeconds(a, b) / 60 / 60 / 24 / 7 / 52));\r\n    }\r\n\r\n    getWeeks(a, b) {\r\n        return Math.abs(super.getWeeks(a, b) % 52);\r\n    }\r\n\r\n    /**\r\n     * Define the name of the class.\r\n     *\r\n     * @return {string}\r\n     */\r\n    static defineName() {\r\n        return 'YearCounter';\r\n    }\r\n}\r\n","import { Counter } from '../Faces';\r\nimport { Original } from '../Themes';\r\nimport { English } from '../Languages';\r\n\r\n/**\r\n * @alias DefaultValues\r\n * @type {object}\r\n * @memberof module:Config/DefaultValues\r\n */\r\nexport default {\r\n    face: Counter,\r\n    theme: Original,\r\n    language: English\r\n};\r\n","import Divider from './Divider';\r\nimport FlipClock from './FlipClock';\r\nimport Group from './Group';\r\nimport Label from './Label';\r\nimport List from './List';\r\nimport ListItem from './ListItem';\r\nimport * as faces from './Faces';\r\n\r\nexport default {\r\n    Divider,\r\n    FlipClock,\r\n    Group,\r\n    Label,\r\n    List,\r\n    ListItem,\r\n    faces\r\n};\r\n","import Face from './Face';\r\nimport List from './List';\r\nimport Group from './Group';\r\nimport Label from './Label';\r\nimport Timer from './Timer';\r\nimport Divider from './Divider';\r\nimport * as Faces from '../Faces';\r\nimport FaceValue from './FaceValue';\r\nimport DomComponent from './DomComponent';\r\nimport validate from '../Helpers/Validate';\r\nimport DefaultValues from '../Config/DefaultValues';\r\nimport ConsoleMessages from '../Config/ConsoleMessages';\r\nimport { flatten, isNull, isString, isObject, isUndefined, isFunction, error } from '../Helpers/Functions';\r\n\r\nexport default class FlipClock extends DomComponent {\r\n   \r\n    /**\r\n     * Create a new `FlipClock` instance.\r\n     *\r\n     * @class FlipClock\r\n     * @extends DomComponent\r\n     * @param {HTMLElement} el - The HTML element used to bind clock DOM node.\r\n     * @param {*} value - The value that is passed to the clock face.\r\n     * @param {object|undefined} attributes - {@link FlipClock.Options} passed an object with key/value.\r\n     */\r\n        \r\n    /**\r\n     * @namespace FlipClock.Options\r\n     * @classdesc An object of key/value pairs that will be used to set the attributes.\r\n     * \r\n     * ##### Example:\r\n     * \r\n     *     {\r\n     *        face: 'DayCounter',\r\n     *        language: 'es',\r\n     *        timer: Timer.make(500)\r\n     *     }\r\n     * \r\n     * @property {string|Face} [face={@link Faces.DayCounter}] - The clock's {@link Face} instance.\r\n     * @property {number} [interval=1000] - The clock's interval rate (in milliseconds).\r\n     * @property {object} [theme={@link Themes.Original}] - The clock's theme.\r\n     * @property {string|object} [language={@link Languages.English}] - The clock's language.\r\n     * @property {Timer} [timer={@link Timer}] - The clock's timer.\r\n     */\r\n    \r\n    constructor(el, value, attributes) {\r\n        if(!validate(el, HTMLElement)) {\r\n            error(ConsoleMessages.element);\r\n        }\r\n\r\n        if(isObject(value) && !attributes) {\r\n            attributes = value;\r\n            value = undefined;\r\n        }\r\n\r\n        const face = attributes.face || DefaultValues.face;\r\n\r\n        delete attributes.face;\r\n\r\n        super(Object.assign({\r\n            originalValue: value,\r\n            theme: DefaultValues.theme,\r\n            language: DefaultValues.language,\r\n            timer: Timer.make(attributes.interval || 1000),\r\n        }, attributes));\r\n\r\n        if(!this.face) {\r\n            this.face = face;\r\n        }\r\n\r\n        this.mount(el);\r\n    }\r\n\r\n    /**\r\n     * The clock `Face`.\r\n     *\r\n     * @type {Face}\r\n     */\r\n    get face() {\r\n        return this.$face;\r\n    }\r\n\r\n    set face(value) {\r\n        if(!validate(value, [Face, 'string', 'function'])) {\r\n            error(ConsoleMessages.face);\r\n        }\r\n\r\n        this.$face = (Faces[value] || value).make(Object.assign(this.getPublicAttributes(), {\r\n            originalValue: this.face ? this.face.originalValue : undefined\r\n        }));\r\n\r\n        this.$face.initialized(this);\r\n\r\n        if(this.value) {\r\n            this.$face.value = this.face.createFaceValue(this, this.value.value);\r\n        }\r\n        else if(!this.value) {\r\n            this.value = this.originalValue;\r\n        }\r\n\r\n        this.el && this.render();\r\n    }\r\n\r\n    /**\r\n     * The `stopAt` attribute.\r\n     *\r\n     * @type {*}\r\n     */\r\n    get stopAt() {\r\n        return isFunction(this.$stopAt) ? this.$stopAt(this) : this.$stopAt;\r\n    }\r\n\r\n    set stopAt(value) {\r\n        this.$stopAt = value;\r\n    }\r\n\r\n    /**\r\n     * The `timer` instance.\r\n     *\r\n     * @type {Timer}\r\n     */\r\n    get timer() {\r\n        return this.$timer;\r\n    }\r\n\r\n    set timer(timer) {\r\n        if(!validate(timer, Timer)) {\r\n            error(ConsoleMessages.timer);\r\n        }\r\n\r\n        this.$timer = timer;\r\n    }\r\n\r\n    /**\r\n     * Helper method to The clock's `FaceValue` instance.\r\n     *\r\n     * @type {FaceValue|null}\r\n     */\r\n    get value() {\r\n        return this.face ? this.face.value : null;\r\n    }\r\n\r\n    set value(value) {\r\n        if(!this.face) {\r\n            throw new Error('A face must be set before setting a value.');\r\n        }\r\n\r\n        if(value instanceof FaceValue) {\r\n            this.face.value = value;\r\n        }\r\n        else if(this.value) {\r\n            this.face.value = this.face.value.clone(value);\r\n        }\r\n        else {\r\n            this.face.value = this.face.createFaceValue(this, value);\r\n        }\r\n\r\n        this.el && this.render();\r\n    }\r\n\r\n    /**\r\n     * The `originalValue` attribute.\r\n     *\r\n     * @type {*}\r\n     */\r\n    get originalValue() {\r\n        if(isFunction(this.$originalValue) && !this.$originalValue.name) {\r\n            return this.$originalValue();\r\n        }\r\n\r\n        if(!isUndefined(this.$originalValue) && !isNull(this.$originalValue)) {\r\n            return this.$originalValue;\r\n        }\r\n\r\n        return this.face ? this.face.defaultValue() : undefined;\r\n    }\r\n\r\n    set originalValue(value) {\r\n        this.$originalValue = value;\r\n    }\r\n\r\n    /**\r\n     * Mount the clock to the parent DOM element.\r\n     *\r\n     * @param  {HTMLElement} el - The parent `HTMLElement`.\r\n     * @return {FlipClock} - The `FlipClock` instance.\r\n     */\r\n    mount(el) {\r\n        super.mount(el);\r\n\r\n        this.face.mounted(this);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Render the clock's DOM nodes.\r\n     *\r\n     * @return {HTMLElement} - The parent `HTMLElement`.\r\n     */\r\n    render() {\r\n        // Call the parent render function\r\n        super.render();\r\n\r\n        // Check to see if the face has a render function defined in the theme.\r\n        // This allows a face to completely re-render or add to the theme.\r\n        // This allows face specific interfaces for a theme.\r\n        if(this.theme.faces[this.face.name]) {\r\n            this.theme.faces[this.face.name](this.el, this);\r\n        }\r\n\r\n        // Pass the clock instance to the rendered() function on the face.\r\n        // This allows global modifications to the rendered templates not\r\n        // theme specific.\r\n        this.face.rendered(this);\r\n\r\n        // Return the rendered `HTMLElement`.\r\n        return this.el;\r\n    }\r\n\r\n    /**\r\n     * Start the clock.\r\n     *\r\n     * @param  {Function} fn - The interval callback.\r\n     * @return {FlipClock} - The `FlipClock` instance.\r\n     */\r\n    start(fn) {\r\n        if(!this.timer.started) {\r\n            this.value = this.originalValue;\r\n        }\r\n\r\n        isUndefined(this.face.stopAt) && (this.face.stopAt = this.stopAt);\r\n        isUndefined(this.face.originalValue) && (this.face.originalValue = this.originalValue);\r\n\r\n        this.timer.start(() => {\r\n            this.face.interval(this, fn);\r\n        });\r\n\r\n        this.face.started(this);\r\n\r\n        return this.emit('start');\r\n    }\r\n\r\n    /**\r\n     * Stop the clock.\r\n     *\r\n     * @param  {Function} fn - The stop callback.\r\n     * @return {FlipClock} - The `FlipClock` instance.\r\n     */\r\n    stop(fn) {\r\n        this.timer.stop(fn);\r\n        this.face.stopped(this);\r\n\r\n        return this.emit('stop');\r\n    }\r\n\r\n    /**\r\n     * Reset the clock to the original value.\r\n     *\r\n     * @param  {Function} fn - The interval callback.\r\n     * @return {FlipClock} - The `FlipClock` instance.\r\n     */\r\n    reset(fn) {\r\n        this.value = this.originalValue;\r\n        this.timer.reset(() => this.interval(this, fn));\r\n        this.face.reset(this);\r\n\r\n        return this.emit('reset');\r\n    }\r\n\r\n    /**\r\n     * Helper method to increment the clock's value.\r\n     *\r\n     * @param  {*|undefined} value - Increment the clock by the specified value.\r\n     *     If no value is passed, then the default increment is determined by\r\n     *     the Face, which is usually `1`.\r\n     * @return {FlipClock} - The `FlipClock` instance.\r\n     */\r\n    increment(value) {\r\n        this.face.increment(this, value);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Helper method to decrement the clock's value.\r\n     *\r\n     * @param  {*|undefined} value - Decrement the clock by the specified value.\r\n     *     If no value is passed, then the default decrement is determined by\r\n     *     the `Face`, which is usually `1`.\r\n     * @return {FlipClock} - The `FlipClock` instance.\r\n     */\r\n    decrement(value) {\r\n        this.face.decrement(this, value);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Helper method to instantiate a new `Divider`.\r\n     *\r\n     * @param  {object|undefined} [attributes] - The attributes passed to the\r\n     *     `Divider` instance.\r\n     * @return {Divider} - The instantiated Divider.\r\n     */\r\n    createDivider(attributes) {\r\n        return Divider.make(Object.assign({\r\n            theme: this.theme,\r\n            language: this.language\r\n        }, attributes));\r\n    }\r\n\r\n    /**\r\n     * Helper method to instantiate a new `List`.\r\n     *\r\n     * @param  {*} value - The `List` value.\r\n     * @param  {object|undefined} [attributes] - The attributes passed to the\r\n     *     `List` instance.\r\n     * @return {List} - The instantiated `List`.\r\n     */\r\n    createList(value, attributes) {\r\n        return List.make(value, Object.assign({\r\n            theme: this.theme,\r\n            language: this.language\r\n        }, attributes));\r\n    }\r\n\r\n    /**\r\n     * Helper method to instantiate a new `Label`.\r\n     *\r\n     * @param  {*} value - The `Label` value.\r\n     * @param  {object|undefined} [attributes] - The attributes passed to the\r\n     *     `Label` instance.\r\n     * @return {Label} - The instantiated `Label`.\r\n     */\r\n    createLabel(value, attributes) {\r\n        return Label.make(value, Object.assign({\r\n            theme: this.theme,\r\n            language: this.language\r\n        }, attributes));\r\n    }\r\n\r\n    /**\r\n     * Helper method to instantiate a new `Group`.\r\n     *\r\n     * @param  {array} items - An array of `List` items to group.\r\n     * @param  {Group|undefined} [attributes] - The attributes passed to the\r\n     *     `Group` instance.\r\n     * @return {Group} - The instantiated `Group`.\r\n     */\r\n    createGroup(items, attributes) {\r\n        return Group.make(items, Object.assign({\r\n            theme: this.theme,\r\n            language: this.language\r\n        }, attributes));\r\n    }\r\n\r\n    /**\r\n     * The `defaults` attribute.\r\n     *\r\n     * @type {object}\r\n     */\r\n    static get defaults() {\r\n        return DefaultValues;\r\n    }\r\n\r\n    /**\r\n     * Define the name of the class.\r\n     *\r\n     * @return {string}\r\n     */\r\n    static defineName() {\r\n        return 'FlipClock';\r\n    }\r\n\r\n    /**\r\n     * Helper method to set the default `Face` value.\r\n     *\r\n     * @param  {Face} value - The default `Face` class.This should be a\r\n     *     constructor.\r\n     * @return {void}\r\n     */\r\n    static setDefaultFace(value) {\r\n        if(!validate(value, Face)) {\r\n            error(ConsoleMessages.face);\r\n        }\r\n\r\n        DefaultValues.face = value;\r\n    }\r\n\r\n    /**\r\n     * Helper method to set the default theme.\r\n     *\r\n     * @param {object} value - The default theme.\r\n     * @return {void}\r\n     */\r\n    static setDefaultTheme(value) {\r\n        if(!validate(value, 'object')) {\r\n            error(ConsoleMessages.theme);\r\n        }\r\n\r\n        DefaultValues.theme = value;\r\n    }\r\n\r\n    /**\r\n     * Helper method to set the default language.\r\n     *\r\n     * @param {object} value - The default language.\r\n     * @return {void}\r\n     */\r\n    static setDefaultLanguage(value) {\r\n        if(!validate(value, 'object')) {\r\n            error(ConsoleMessages.language);\r\n        }\r\n\r\n        DefaultValues.language = value;\r\n    }\r\n\r\n}\r\n"],"names":["error","string","Error","callback","fn","isFunction","args","call","this","round","value","isNegativeZero","isNegative","Math","ceil","floor","toString","noop","isUndefined","isNull","chain","before","after","concatMap","x","map","reduce","y","concat","flatten","deepFlatten","Array","isArray","length","Infinity","isConstructor","Function","name","isString","isObject","type","isNumber","isNaN","kebabCase","replace","toLowerCase","digitize","options","prepend","number","prependLeadingZero","split","Object","assign","minimumDigits","digits","arr","min","i","unshift","format","parseFloat","findRange","char","RANGES","code","charCodeAt","max","stringFromCharCodeBy","String","fromCharCode","next","range","join","prev","validate","success","forEach","arg","_typeof","language","LANGUAGES","values","find","aliases","indexOf","translate","from","lang","dictionary","swap","subject","existing","parentNode","replaceChild","setAttributes","el","attributes","setAttribute","appendChildren","children","filter","child","HTMLElement","appendChild","createElement","document","innerHTML","instance","index","childNodes","querySelector","group","groupEl","querySelectorAll","lists","listValue","createList","domValue","countdown","animationRate","face","delay","createGroup","render","items","item","t","label","beforeValue","classList","add","style","animationDelay","animationDuration","createListItem","active","className","createDivider","mount","showSeconds","showLabels","createLabel","TwentyFourHourClock","showMeridium","meridium","parent","Component","events","key","event","apply","_this","push","_this2","off","on","hasOwnProperty","getOwnPropertyNames","_this3","getAttribute","keys","getAttributes","match","obj","_this4","constructor","defineName","$events","FaceValue","getPublicAttributes","$digits","$value","theme","date","element","faceValue","timer","Face","undefined","autoStart","defaultAttributes","defaultValue","decrement","increment","shouldStop","stop","emit","stopAt","amount","isStopped","window","requestAnimationFrame","start","make","defaultDataType","createFaceValue","$stopAt","$originalValue","DomComponent","insertBefore","$el","ConsoleMessages","$parent","$theme","$language","Divider","ListItem","List","$items","Group","Label","Timer","interval","count","handle","started","running","Date","lastLoop","now","loop","isRunning","setTimeout","cancelAnimationFrame","getTime","Counter","MinuteCounter","diff","originalValue","getMinutes","getSeconds","a","b","getTotalSeconds","totalSeconds","abs","HourCounter","data","getHours","_get","DayCounter","getDays","groups","offset","TwelveHourClock","hours","WeekCounter","getWeeks","YearCounter","getYears","FlipClock","faces","English","DefaultValues","mounted","rendered","stopped","reset","$face","Faces","initialized","$timer","clone"],"mappings":"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GAAW,KAAM,QAAS,oDCd1BK,SACA,eACA,cACA,aACA,gBACA,kBACA,WAQAL,GAAW,KAAM,QAAS,qDCd1BK,SACA,cACA,aACA,aACA,gBACA,kBACA,YAQAL,GAAW,KAAM,QAAS,qDCd1BK,SACA,aACA,WACA,YACA,eACA,gBACA,SAQAL,GAAW,KAAM,QAAS,qDCd1BK,SACA,gBACA,iBACA,eACA,iBACA,oBACA,YAQAL,GAAW,KAAM,QAAS,qDCd1BK,SACG,aACA,YACA,cACA,iBACA,kBACA,YAQHL,GAAW,KAAM,QAAS,oDCd1BK,SACA,cACA,YACA,aACA,eACA,eACA,SAQAL,GAAW,KAAM,QAAS,oDCd1BK,SACA,YACG,aACA,YACA,cACA,eACA,aAQHL,GAAW,KAAM,QAAS,uDCd1BK,SACA,cACA,YACA,eACA,cACA,iBACA,WAQAL,GAAW,KAAM,QAAS,oDCd1BK,SACA,WACA,SACA,UACA,YACA,YACA,KAQAL,GAAW,KAAM,QAAS,sDCd1BK,SACA,WACA,SACA,UACA,YACA,YACA,KAQAL,GAAW,KAAM,QAAS,oDCd1BK,SACG,cACA,cACA,eACA,kBACA,kBACA,YAQHL,GAAW,KAAM,QAAS,qDCd1BK,SACG,eACA,eACA,cACA,eACA,kBACA,YAQHL,IAAW,KAAM,QAAS,qDCd1BK,UACA,YACA,eACA,cACA,gBACA,mBACA,YAQAL,IAAW,KAAM,KAAM,QAAS,0DCdhCK,UACA,aACA,gBACA,YACA,kBACA,iBACA,WAQAL,IAAW,KAAM,QAAS,uDCd1BK,UACA,cACA,aACA,aACA,gBACA,kBACA,YAQAL,IAAW,KAAM,QAAS,2DCd1BK,UACH,aACC,YACF,aACC,cACE,iBACA,YAQCL,IAAW,KAAM,QAAS,uDCd1BK,UACG,aACA,eACA,aACA,gBACA,gBACA,UAQHL,IAAW,KAAM,QAAS,wDCd1BK,UACA,cACA,eACA,YACA,iBACA,iBACA,WAQAL,IAAW,KAAM,QAAS,uDCd1BK,UACA,YACA,eACA,cACA,iBACA,kBACA,YAQAL,IAAW,KAAM,QAAS,wDCd1BK,UACA,YACA,aACA,YACA,kB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"}